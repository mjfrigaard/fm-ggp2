{
  "hash": "bb2ac50bd5e6e2134b55d986ec6a7ab6",
  "result": {
    "markdown": "# Parallel sets {.unnumbered}\n\n\n\n\n\n\n::: {.callout-tip appearance='simple' icon=false}\n***This graph is largely complete and just needs final proof reading.*** \n:::\n\n\n:::: {.callout-note collapse=\"false\" icon=false}\n\n::: {style=\"font-size: 1.25em; color: #02577A;\"}\nGraph info\n:::\n\n<br>\n\n\n::: {.cell layout-align=\"right\"}\n::: {.cell-output-display}\n![](parallel_sets_files/figure-html/full_code_display-1.png){fig-align='right' width=60% height=60%}\n:::\n:::\n\n\n::: {style=\"font-size: 1.10em; color: #02577A;\"}\n**This graph requires:**\n:::\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ three categorical variables**    \n:::\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ a numeric variable of counts**\n:::\n\n::::\n\n## Description\n\nParallel sets (also referred to as Sankey diagrams or Alluvial charts) show the counts of categorical variables connected via a two-sided parallel display (or 'sets'). Parallel sets can also be used to show different states of paired dependent relationships (such as input vs output), or time 1 vs time 2.\n\nThe height of the connecting bands *between* the categories on the `x` axis represent the relative counts for each discrete level (displayed on the `y` axis). The levels *within* each variable are represented with color. \n\nWe can build parallel set diagrams with the [`ggforce` package](https://ggforce.data-imaginist.com/index.html).  \n\nAlso check out [alluvial charts.](https://mjfrigaard.github.io/ggp2-gallery/rela/alluvial_charts.html)\n\n## Getting set up \n\n:::: {.panel-tabset}\n\n### Packages\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**PACKAGES:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nInstall packages.\n:::\n\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n# pak::pak(\"thomasp85/ggforce\")\ninstall.packages(\"palmerpenguins\")\nlibrary(ggforce)\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n```\n:::\n\n:::\n\n### Data\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {.column-margin}\n![Artwork by allison horst](www/lter_penguins.png){fig-align=\"right\" width=\"100%\" height=\"100%\"}\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nWe're going to remove the missing values from `palmerpenguins::penguins`, count the categorical variables (`island`, `sex`, `species`), and rename the `n` column (produced by the `count()` function) to `value`.\n\n`ggforce` has a special [`gather_set_data()`](https://ggforce.data-imaginist.com/reference/gather_set_data.html) function that *changes tidy data into a tidy(er) format*\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\npeng_wide <- palmerpenguins::penguins |> \n  drop_na() |> \n  count(island, species, sex) |> \n  rename(value = n)\npara_set_peng <- ggforce::gather_set_data(\n                            data = peng_wide, \n                            x = 1:3)\ndplyr::glimpse(para_set_peng)\n#> Rows: 30\n#> Columns: 7\n#> $ island  <fct> Biscoe, Biscoe, Biscoe, Biscoe, Dream, Dre…\n#> $ species <fct> Adelie, Adelie, Gentoo, Gentoo, Adelie, Ad…\n#> $ sex     <fct> female, male, female, male, female, male, …\n#> $ value   <int> 22, 22, 58, 61, 27, 28, 34, 34, 24, 23, 22…\n#> $ id      <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4,…\n#> $ x       <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, …\n#> $ y       <fct> Biscoe, Biscoe, Biscoe, Biscoe, Dream, Dre…\n```\n:::\n\n:::\n::::\n\n## The grammar\n\n:::: {.panel-tabset}\n\n### Code\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**CODE:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\nCreate labels with `labs()`\n\nInitialize the graph with `ggplot()` and provide `data`\n\nMap `x` to `x`, `id` to `id`, `y` to `split`, and `value` to `value`\n\nIn the `geom_parallel_sets()` function, map `sex` to `fill` and manually set the `alpha` (opacity) and the `axis.width` \n\nIn the `geom_parallel_sets_axes()` function, set the `axis.width` to the same value as the `geom_parallel_sets()` above\n\nFor labeling, adjust the `size` manually and set the `color` to something that stands out against the black vertical axes\n\nManually label the `x` axis with `scale_x_continuous()`, setting the `breaks` and `labels` to the variable names in the `peng_wide` dataset\n\nFinally, remove the `x` title with `axis.title.x = element_blank()`\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nlabs_psets <- labs(\n        title = \"Categories of Palmer Penguins\", \n        y = \"Count\", fill = \"Sex\")\n\nggp2_psets <- ggplot(data = para_set_peng, \n    mapping = aes(x = x, \n        id = id, \n        split = y, \n        value = value)) +\n  geom_parallel_sets(aes(fill = sex), \n        alpha = 0.3, \n        axis.width = 0.07) \n\nggp2_psets_axes <- ggp2_psets +\n  geom_parallel_sets_axes(\n        axis.width = 0.07) \n\nggp2_psets_labs <- ggp2_psets_axes +\n  geom_parallel_sets_labels(\n        size = 2.0, \n        color = '#ffffff') +\n  scale_x_continuous(\n        breaks = c(1, 2, 3), \n        labels = c(\"Island\", \"Species\", \"Sex\")) +\n  theme(axis.title.x = element_blank())\n\nggp2_psets_labs +\n    labs_psets\n```\n:::\n\n:::\n\n### Graph\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**GRAPH:**\n:::\n\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n::: {.cell-output-display}\n![](parallel_sets_files/figure-html/create_graph_parallel_sets-1.png){width=100% height=100%}\n:::\n:::\n\n\n::::\n\n## More info\n\nIf the categories have long names, you can move the location of the labels *outside* the set. \n\n\n:::: {.panel-tabset}\n### Labeling sets\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**LABELS:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nIf the categories have long names, use the `angle`, `nudge_x`/`nudge_y` and `hjust`/`vjust` in `geom_parallel_sets_labels()` to adjust the size, location, and color of the labels. \n\nManually setting the `limits` of the `x` axis in `scale_x_continuous()` will also give more room for the labels. \n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggp2_psets_axes + \n  geom_parallel_sets_labels(\n      size = 3.2, \n      colour = '#000000',\n      angle = 0, \n      nudge_x = 0.1, \n      hjust = 0) + \n  scale_x_continuous(\n        limits = c(0.9, 3.2),\n        breaks = c(1, 2, 3), \n        labels = c(\"Island\", \"Species\", \"Sex\")) + \n  theme(axis.title.x = element_blank()) + \n    labs_psets\n```\n\n::: {.cell-output-display}\n![](parallel_sets_files/figure-html/create_graph_parallel_sets_labs-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n::::\n",
    "supporting": [
      "parallel_sets_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}