{
  "hash": "0330b1659f5a87305499b6c5d0ebfb7f",
  "result": {
    "engine": "knitr",
    "markdown": "# Grouped bar graphs {#sec-grp-bar-graphs}\n\n\n\n\n\n\n\n\n\n::: {.callout-tip appearance='simple' icon=false}\n***This graph is largely complete and just needs final proof reading.*** \n:::\n\n\n\n\n\n\n:::: {.callout-note collapse=\"false\" icon=false}\n\n::: {style=\"font-size: 1.10em; color: #02577A;\"}\n**This graph requires:**\n:::\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ a categorical variable**      \n:::\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ a numeric (continuous) variable**\n:::\n\n<br>\n\n\n\n\n\n::: {.cell layout-align=\"right\"}\n::: {.cell-output-display}\n![](grp_bar_graphs_files/figure-html/full_code_display-1.png){fig-align='right' width=60% height=60%}\n:::\n:::\n\n\n\n\n\n::::\n\n## Description \n\nGrouped bar graphs compare multiple values across categories. Each category has a cluster of bars. X-axis labels show categories and y-axis values. Colors or patterns differentiate subsets, and a legend is shown on the side or top of the graph.\n\n`geom_col()` allows us to display 'grouped' numerical values across levels (or groups) of a categorical variable. \n\n## Set up\n\n::: {style=\"font-size: 1.10em; color: #1e83c8;\"}\n**PACKAGES:**\n:::\n\nInstall packages.\n\n::: {style=\"font-size: 0.85em;\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n```\n:::\n\n\n\n\n:::\n\n\n\n::: {style=\"font-size: 1.10em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {.column-margin}\n![Artwork by Allison Horst](www/lter_penguins.png){fig-align=\"right\" width=\"100%\" height=\"100%\"}\n:::\n\nRemove the missing values and reduce the `palmerpenguins::penguins` dataset to only `body_mass_g` and `island`, then group the data by `island` and calculate the sum of `body_mass_g` (as `sum_body_mass_g`). \n\n::: {style=\"font-size: 0.85em;\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\npeng_grp_col <- palmerpenguins::penguins |>\n    dplyr::select(body_mass_g, island) |> \n    tidyr::drop_na() |> \n    dplyr::group_by(island) |>\n    dplyr::summarise(\n        sum_body_mass_g = sum(body_mass_g)\n        ) |>\n    dplyr::ungroup()\nglimpse(peng_grp_col)\n#> Rows: 3\n#> Columns: 2\n#> $ island          <fct> Biscoe, Dream, Torgersen\n#> $ sum_body_mass_g <int> 787575, 460400, 189025\n```\n:::\n\n\n\n\n:::\n\n\n## Grammar\n\n::: {style=\"font-size: 1.10em; color: #1e83c8;\"}\n**CODE:**\n:::\n\nGrouped bar graphs assume the statistical measure (i.e., the value that the length of the bars will be derived from) is contained in a variable and mapped to the `x` or `y` aesthetic. \n\n  -   Create labels with `labs()`\n\n  -   Initialize the graph with `ggplot()` and provide `data`\n\n  -   Map `island` to the `x` and `sum_body_mass_g` to the `y`\n\n  -   Map `island` to `fill` *inside* the `aes()` of `geom_col()` \n\n::: {style=\"font-size: 0.85em;\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nlabs_grp_col <- labs(\n    title = \"Total Penguin Mass\",\n    subtitle = \"What's the total mass of penguins per Island?\",\n    x = \"Island\",\n    y = \"Total penguin body mass (g)\")\nggp2_grp_col <- ggplot(data = peng_grp_col,\n              aes(x = island, \n                  y = sum_body_mass_g)) + \n        geom_col(aes(fill = island),\n            show.legend = FALSE)\nggp2_grp_col + \n    labs_grp_col\n```\n:::\n\n\n\n\n:::\n\n::: {style=\"font-size: 1.10em; color: #1e83c8;\"}\n**GRAPH:**\n:::\n\n\n\n\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n::: {.cell-output-display}\n![](grp_bar_graphs_files/figure-html/create_graph_grp_col-1.png){width=100% height=100%}\n:::\n:::\n\n\n\n\n\n\n## More Info\n\nWe didn't have to calculate `sum_body_mass_g` (displayed on the `y` axis) by `island` because `ggplot2` does this for us!\n\nIf we pass a categorical variable to the `x` (like `island`) and a continuous variable to `y` (like `body_mass_kg`), `geom_col()` will calculate the `sum()` of `y` by levels of `x`:\n\n::: {style=\"font-size: 0.85em;\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  penguins |> \n  dplyr::select(body_mass_g, island) |> \n  tidyr::drop_na() |>\n  ggplot(aes(x = island, y = body_mass_g)) + \n        geom_col(aes(fill = island),\n            show.legend = FALSE) + \n  labs_grp_col\n```\n\n::: {.cell-output-display}\n![](grp_bar_graphs_files/figure-html/create_summary_sum_col_graph-1.png){width=576}\n:::\n:::\n\n\n\n\n:::\n\n\nWe can see the underlying totaling of `body_mass_g` using `dplyr`’s `group_by()` and `summarise()` functions.\n\n::: {style=\"font-size: 0.85em;\"}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins |> \n    dplyr::select(body_mass_g, island) |> \n    tidyr::drop_na() |> \n    dplyr::group_by(island) |>\n    dplyr::summarise(\n        `Total Penguin Body Mass (kg)` = sum(body_mass_g)\n        ) |>\n    dplyr::ungroup() |> \n    dplyr::select(`Island` = island, \n        `Total Penguin Body Mass (kg)`)\n```\n:::\n\n\n\n\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\n\n\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-minimal\" style='font-family: \"Trebuchet MS\", verdana, sans-serif; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Island </th>\n   <th style=\"text-align:right;\"> Total Penguin Body Mass (kg) </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Biscoe </td>\n   <td style=\"text-align:right;\"> 787.575 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Dream </td>\n   <td style=\"text-align:right;\"> 460.400 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> 189.025 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n:::",
    "supporting": [
      "grp_bar_graphs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}