{
  "hash": "5c6f84a99e2a5406fc658f1138ab85cd",
  "result": {
    "markdown": "# Treemaps {.unnumbered}\n\n\n\n\n\n::: {.callout-tip appearance='simple' icon=false}\n***This graph is largely complete and just needs final proof reading.*** \n:::\n\n\n:::: {.callout-note collapse=\"false\" icon=false}\n## Graph info\n::: {style=\"font-size: 1.25em; color: #007bff;\"}\n**Should I use this graph?**\n:::\n\n<br>\n\n\n::: {.cell layout-align=\"right\"}\n::: {.cell-output-display}\n![](treemaps_files/figure-html/full_code_display-1.png){fig-align='right' width=60% height=60%}\n:::\n:::\n\n\n::: {style=\"font-size: 1.10em; color: #007bff;\"}\n**This graph requires:**\n:::\n\n::: {style=\"font-size: 1.05em; color: #fa7b3c;\"}\n**✅ at least two categorical variables**     \n:::\n\n::: {style=\"font-size: 1.05em; color: #fa7b3c;\"}\n**✅ a numeric variable of counts (for each level of the categorical variables)**\n:::\n\n::::\n\n## Description \n\nTreemaps display proportionally divided rectangular hierarchies for levels of categorical variables. The layout consists of 'squarified' tiles, which display the relative contribution of each categorical value to the overall graph space. \n\nWe'll build a treemap using the [`treemapify` package.](http://wilkox.org/treemapify/) Also check out [mosaic plots](https://mjfrigaard.github.io/ggp2-gallery/prp/mosaic_plot.html).\n\n## Getting set up\n\n:::: {.panel-tabset}\n\n### Packages\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**PACKAGES:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nInstall packages.\n:::\n\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n# pak::pak(\"wilkox/treemapify\")\n# install.packages(\"palmerpenguins\")\nlibrary(treemapify) \nlibrary(palmerpenguins)\nlibrary(ggplot2)\n```\n:::\n\n:::\n\n### Data\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {.column-margin}\n![Artwork by @allison_horst](www/lter_penguins.png){fig-align=\"right\" width=\"100%\" height=\"100%\"}\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nFilter the missing values from `sex`, group the data by `species`, `island`, and `sex`, then count the `species` and `island` (then `ungroup()`).\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ntreemap_peng <- penguins |> \n    dplyr::select(species, island, sex) |>\n    tidyr::drop_na() |>\n    dplyr::group_by(species, island, sex) |>\n    dplyr::count(species, island, sex) |>\n    ungroup()\nglimpse(treemap_peng)\n#> Rows: 10\n#> Columns: 4\n#> $ species <fct> Adelie, Adelie, Adelie, Adelie, Adelie, Ad…\n#> $ island  <fct> Biscoe, Biscoe, Dream, Dream, Torgersen, T…\n#> $ sex     <fct> female, male, female, male, female, male, …\n#> $ n       <int> 22, 22, 27, 28, 24, 23, 34, 34, 58, 61\n```\n:::\n\n:::\n::::\n\n## The grammar\n\n:::: {.panel-tabset}\n\n### Code\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**CODE:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\nCreate labels with `labs()`\n\nInitialize the graph with `ggplot()` and provide `data`\n\n- Map the `n` to `area`, `sex` to `fill` and `label`, `species` to `subgroup`, and `island` to `subgroup2`\n\n- Add `geom_treemap()`\n\n- Add `geom_treemap_text()`   \n\n  - `place`: this controls where the boxes start      \n  - `color`: text color    \n  - `min.size`: the minimum font size (when re-sizing)    \n  - `alpha`: opacity      \n  - `fontface`: `itlalic`/`bond`    \n  - `family`: `\"sans\"`/`\"sansserif\"`/`\"mono\"`  \n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nlabs_treemap <- labs(\n  title = \"Adult foraging penguins\",\n    fill = \"Sex\")\nggp2_treemap <- ggplot(treemap_peng, \n       aes(area = n, \n           fill = sex, \n           label = sex,\n           subgroup = species,\n           subgroup2 = island)) +\n       treemapify::geom_treemap() +\n       treemapify::geom_treemap_text(\n           place = \"bottomright\",\n           color = \"#d0d0d0\",\n           min.size = 0,\n           alpha = 0.90,\n           fontface = \"italic\",\n           family = \"sans\") \nggp2_treemap + \n  labs_treemap\n```\n:::\n\n:::\n\n### Graph\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**GRAPH:**\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nlabs_treemap <- labs(\n  title = \"Adult foraging penguins\",\n    fill = \"Sex\")\nggp2_treemap <- ggplot(treemap_peng, \n       aes(area = n, \n           fill = sex, \n           label = sex,\n           subgroup = species,\n           subgroup2 = island)) +\n       treemapify::geom_treemap() +\n       treemapify::geom_treemap_text(\n           place = \"bottomright\",\n           color = \"#d0d0d0\",\n           min.size = 0,\n           alpha = 0.90,\n           fontface = \"italic\",\n           family = \"sans\") \nggp2_treemap + \n  labs_treemap\n```\n\n::: {.cell-output-display}\n![](treemaps_files/figure-html/create_graph_treemap-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n::::\n\n\n## More info\n\n`treemapify` has multiple options for building treemaps. We cover a few of these below, but you should check out the [package vignette](https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html). \n\n\n:::: {.panel-tabset}\n### Subgroup \n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**SUBGROUP:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\n`ggplot2` build layers in the order they're written, so it's [advised](https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html) to build the subgroups in order from \"*from deepest to shallowest*\", with `subgroups2` first (ending on `subgroup`)\n\n- Add `geom_treemap_subgroup2_border()`\n\n  - Set the `size` and `color`  \n\n- Add `geom_treemap_subgroup2_text()`\n\n  - `place`: this controls where the boxes start      \n  - `color`: text color    \n  - `min.size`: the minimum font size (when re-sizing)    \n  - `alpha`: opacity      \n  - `fontface`: `itlalic`/`bond`    \n  - `family`: `\"sans\"`/`\"sansserif\"`/`\"mono\"`  \n\n\nSee full list of arguments [here](http://wilkox.org/treemapify/).\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggp2_tm_subgroup <- ggp2_treemap +\n    treemapify::geom_treemap_subgroup2_border(\n           color = \"#282b2d\",\n           size = 4.0) + \n       treemapify::geom_treemap_subgroup2_text(\n           place = \"center\",\n           alpha = 0.65,\n           color = \"#282b2d\",\n           min.size = 0,\n           family = \"sans\")\nggp2_tm_subgroup +\n  labs_treemap\n```\n\n::: {.cell-output-display}\n![](treemaps_files/figure-html/code_graph_treemap_sgb-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n### Subgroup 2\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**SUBGROUP 2:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\nAdd `geom_treemap_subgroup_border()`\n\n  - Set the `size` and `color`    \n\nAdd `geom_treemap_subgroup_text()`\n\n  - `place`: this controls where the boxes start      \n  - `color`: text color    \n  - `min.size`: the minimum font size (when re-sizing)    \n  - `alpha`: opacity      \n  - `fontface`: `itlalic`/`bond`    \n  - `family`: `\"sans\"`/`\"sansserif\"`/`\"mono\"` \n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggp2_tm_subgroup2 <- ggp2_tm_subgroup + \n       treemapify::geom_treemap_subgroup_border(\n           color = \"#ffffff\", \n           size = 4) + \n       treemapify::geom_treemap_subgroup_text(\n           place = \"topleft\",\n           alpha = 0.65,\n           grow = TRUE,\n           color = \"#ffffff\",\n           min.size = 0,\n           family = \"mono\",\n           fontface = \"bold\")\n\nggp2_tm_subgroup2 + \n  labs_treemap\n```\n\n::: {.cell-output-display}\n![](treemaps_files/figure-html/code_graph_tmap_sgb_2-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n::::\n",
    "supporting": [
      "treemaps_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}