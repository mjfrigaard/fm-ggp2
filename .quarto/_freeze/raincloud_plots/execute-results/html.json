{
  "hash": "2515fd7f87f7b3b5f11cd34c1f12f5d2",
  "result": {
    "markdown": "# Raincloud plots {.unnumbered}\n\n\n\n\n\n::: {.callout-tip appearance='simple' icon=false}\n***This graph is largely complete and just needs final proof reading.*** \n:::\n\n\n:::: {.callout-note collapse=\"false\" icon=false}\n\n::: {style=\"font-size: 1.25em; color: #02577A;\"}\nGraph info\n:::\n\n<br>\n\n\n::: {.cell layout-align=\"right\"}\n::: {.cell-output-display}\n![](raincloud_plots_files/figure-html/full_code_display-1.png){fig-align='right' width=60% height=60%}\n:::\n:::\n\n::: {.cell layout-align=\"right\"}\n\n:::\n\n\n::: {style=\"font-size: 1.10em; color: #02577A;\"}\n**This graph requires:**\n:::\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ a categorical variable**      \n:::\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ a numeric (continuous) variable**\n:::\n\n::::\n\n## Description \n\nRaincloud plots are a combination of density graph, a box plot, and a beeswarm (or jitter) plot, and are used to compare distributions of quantitative/numerical variables across the levels of a categorical (or discrete) grouping variable.\n\nWe can use the [`raincloudplots` package](https://github.com/jorvlan/raincloudplots) to create raincloud plots, or they can be built using the [`ggdist` package](https://mjskay.github.io/ggdist/) and geoms from `ggplot2`.\n\n## Getting set up\n\n:::: {.panel-tabset}\n\n### Packages\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**PACKAGES:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nInstall packages.\n:::\n\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nremotes::install_github('jorvlan/raincloudplots')\nremotes::install_github('mjskay/ggdist')\nlibrary(raincloudplots)\nlibrary(ggdist)\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n```\n:::\n\n:::\n\n### Data\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {.column-margin}\n![Artwork by allison horst](www/lter_penguins.png){fig-align=\"right\" width=\"100%\" height=\"100%\"}\n:::\n\n\n::: {style=\"font-size: 0.85em;\"}\nRemove the missing values from `year` and `flipper_length_mm` the `penguins` data. The `raincloudplots` package has a `data_1x1()` function we can use to build the dataset for a 1x1 repeated measure graph (`peng_1x1`).\n\nThis function takes two array arguments (`array_1` and `array_2`), which we create with the flipper length (`flipper_length_mm`) for two levels of `year` in the `peng_raincloud` data. \n\nThe `jit_distance` and `jit_seed` refer to the points in the plot.\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\n# remove missing\npeng_raincloud <- palmerpenguins::penguins |> \n    filter(!is.na(year) & !is.na(body_mass_g))\n# filter flipper length by years 2008 & 2009\npeng_1x1 <- raincloudplots::data_1x1(\n  array_1 = dplyr::filter(peng_raincloud, year == 2008)$flipper_length_mm,\n  array_2 = dplyr::filter(peng_raincloud, year == 2009)$flipper_length_mm,\n  jit_distance = 0.2, # distance between points\n  jit_seed = 2736) # used in set.seed() \nglimpse(peng_1x1)\n#> Rows: 233\n#> Columns: 4\n#> $ y_axis <int> 186, 188, 190, 200, 187, 191, 186, 193, 181…\n#> $ x_axis <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n#> $ id     <fct> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, …\n#> $ jit    <dbl> 1.0200375, 0.9498208, 0.8820888, 0.9516411,…\n```\n:::\n\n:::\n::::\n\n## The grammar (`raincloudplots`)\n\n:::: {.panel-tabset}\n\n### Code\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**CODE:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\nCreate labels with `labs()`\n\nUse the `raincloudplots::raincloud_1x1()` to build the plot, assigning `peng_1x1` to `data_1x1`  \n  - assign `colors` and `fills`  \n  - set the size (of the points) and alpha (for opacity)\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nggp2_raincloud <- raincloudplots::raincloud_1x1(\n    data_1x1 = peng_1x1,\n    colors = (c('#0bd3d3', '#282b2d')),\n    fills = (c('#0bd3d3', '#282b2d')),\n    size = 0.8,\n    alpha = 3/4,\n    ort = 'h') \n\nggp2_raincloud_x <- ggp2_raincloud +\n    ggplot2::scale_x_continuous(\n        breaks = c(1, 2),\n        labels = c(\"2008\", \"2009\"),\n        limits = c(0, 3))\n\nggp2_raincloud_x + \n    ggplot2::labs(\n        title = \"Flipper length of Palmer penguins\",\n        subtitle = \"Years 2008 & 2009\", \n        x = \"Year\", \n        y = \"Flipper length (mm)\")\n```\n:::\n\n:::\n\n### Graph\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**GRAPH:**\n:::\n\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n::: {.cell-output-display}\n![](raincloud_plots_files/figure-html/create_graph_raincloud-1.png){width=100% height=100%}\n:::\n:::\n\n\n::::\n\n## More info\n\n:::: {.panel-tabset}\n\n### Data\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {.column-margin}\n![Artwork by allison_horst](www/lter_penguins.png){fig-align=\"right\" width=\"100%\" height=\"100%\"}\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nWe'll use the `peng_raincloud` data (with the missing values removed from `species` and `body_mass_g`).\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove missing\npeng_raincloud <- palmerpenguins::penguins |> \n                    filter(!is.na(species) & \n                            !is.na(body_mass_g))\nglimpse(peng_raincloud)\n#> Rows: 342\n#> Columns: 8\n#> $ species           <fct> Adelie, Adelie, Adelie, Adelie, …\n#> $ island            <fct> Torgersen, Torgersen, Torgersen,…\n#> $ bill_length_mm    <dbl> 39.1, 39.5, 40.3, 36.7, 39.3, 38…\n#> $ bill_depth_mm     <dbl> 18.7, 17.4, 18.0, 19.3, 20.6, 17…\n#> $ flipper_length_mm <int> 181, 186, 195, 193, 190, 181, 19…\n#> $ body_mass_g       <int> 3750, 3800, 3250, 3450, 3650, 36…\n#> $ sex               <fct> male, female, female, female, ma…\n#> $ year              <int> 2007, 2007, 2007, 2007, 2007, 20…\n```\n:::\n\n:::\n\n### Box-plot\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**`ggplot2::geom_boxplot()`**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\nCreate labels with `labs()`\n\nInitialize the graph with `ggplot()` and provide `data`\n\nFor the first layer, we create a box plot with `geom_boxplot()`, but include notches and remove the outliers. \n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nlabs_raincloud_2 <- ggplot2::labs(\n    title = \"Flipper length of Palmer penguins\",\n         x = \"Flipper length (mm)\",\n         y = \"Species\")\nggp2_box <- ggplot(peng_raincloud,\n    aes( x = flipper_length_mm, y = species)) + \n  geom_boxplot(aes(fill = species),\n    notch = TRUE, \n    notchwidth = 0.9,\n    width = 0.15, \n    outlier.shape = NA,\n    show.legend = FALSE)\nggp2_box + \n    labs_raincloud_2\n```\n\n::: {.cell-output-display}\n![](raincloud_plots_files/figure-html/create_graph_raincloud2_box-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n### Density\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**`ggdist::stat_halfeye()`**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\nWe then add a horizontal density curve with `ggdist::stat_halfeye()`, mapping `species` to `fill`, and adjusting the size and shape of the density curve and shifting it slightly above the box plot.\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggp2_stat_halfeye <- ggp2_box +\n  ggdist::stat_halfeye(aes(fill = species),\n    adjust = 0.6, # shape = adjust * density estimator\n    .width = 0, # can use probabilities or 0\n    point_colour = NA, # removes the point in center\n    orientation = \"horizontal\", # like the box plot\n    height = 0.5, # height of curve\n    justification = -0.3, # shift vertically above box\n    show.legend = FALSE # don't need this \n) \nggp2_stat_halfeye + \n    labs_raincloud_2\n```\n\n::: {.cell-output-display}\n![](raincloud_plots_files/figure-html/create_graph_raincloud2_halfeye-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n\n### Points\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**`ggplot2::geom_point()`**\n:::\n\n\n::: {style=\"font-size: 0.85em;\"}\nThe final layer is a `geom_point()`, mapping `fill` to `species` and setting `position` to `position_jitter()`. Additional adjustments to the points include:\n\n- Using `shape = 21`, we can `color` the outside of the point (white makes it appear to glow). \n\n- Manually set the `height`, which refers to the vertical area for the points \n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggp2_jitter <- ggp2_stat_halfeye + \n    geom_point(aes(fill = species),\n        position = position_jitter(\n          seed = 321, \n          height = .07),\n            shape = 21, \n            color = \"#ffffff\", \n            alpha = 1/3, \n            size = 1.8,\n            show.legend = FALSE) \nggp2_jitter + \n    labs_raincloud_2\n```\n\n::: {.cell-output-display}\n![](raincloud_plots_files/figure-html/create_graph_raincloud2_jitter-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n::::\n\n## More examples & resources\n\n:::: {.panel-tabset}\n\n### Point shape\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**Point shape**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nCédric Scherer covered raincloud plots in [this great write-up](https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/) for [#TidyTuesday](https://github.com/rfordatascience/tidytuesday).\n\nCédric also covers some alternative methods for plotting the points (I particularly like using bands instead of points when displaying the rainclouds vertically).\n\nWe can switch to this layout by applying `ggplot2::coord_flip()` to the `ggp2_stat_halfeye` layer, then adding `geom_point()` with `shape` set to `95`\n:::\n\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggp2_stat_halfeye + \n    ggplot2::coord_flip() + \nggplot2::geom_point(\n    shape = 95,\n    size = 8,\n    alpha = 0.2) + \n    theme(legend.position = \"none\") + \n    labs_raincloud_2\n```\n\n::: {.cell-output-display}\n![](raincloud_plots_files/figure-html/create_graph_raincloud2_point_lines-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n\n### #TidyTuesday example\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**Polished Graph**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nThe code to re-create the #TidyTuesday graph is contained in this [gist.](https://gist.github.com/z3tt/8b2a06d05e8fae308abbf027ce357f01) \n\n![](www/rainclouds_gist.png){fig-align=\"center\" width=\"100%\" height=\"100%\"}\n\n:::\n\n### More resources\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**MORE RESOURCES**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n1. Raincloud plots: a multi-platform tool for robust data visualization. [1](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6480976/)\n\n2. Shape and point sizes in R. [2](https://r-graphics.org/recipe-scatter-shapes)\n\n3. RainCloudPlots package on GitHub. [3](https://github.com/RainCloudPlots/RainCloudPlots)\n:::\n\n::::\n",
    "supporting": [
      "raincloud_plots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}