{"title":"Grouped line graphs","markdown":{"headingText":"Grouped line graphs","headingAttr":{"id":"","classes":["unnumbered"],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r}\n#| label: setup\n#| message: false\n#| warning: false\n#| include: false\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(scales)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(colorblindr)\nlibrary(downlit)\nlibrary(patchwork)\n# fonts ----\nlibrary(extrafont)\nlibrary(sysfonts)\nsource(\"_common.R\")\n# use font\nshowtext::showtext_auto()\n# set theme\nggplot2::theme_set(theme_ggp2g(\n    base_size = 12))\n\"%nin%\" <- function(x, y) {\n  return( !(x %in% y) )\n}\n```\n\n```{r}\n#| label: status\n#| results: \"asis\"\n#| echo: false\n# status ----\n# polish, dev, draft, complete\nstatus(\"complete\")\n```\n\n\n:::: {.callout-note collapse=\"false\" icon=false}\n## Graph info\n::: {style=\"font-size: 1.25em; color: #007bff;\"}\n**Should I use this graph?**\n:::\n\n<br>\n\n```{r}\n#| label: full_code_display\n#| eval: true\n#| echo: false\n#| warning: false\n#| message: false\n#| out-height: '60%'\n#| out-width: '60%'\n#| fig-align: right\nlibrary(fivethirtyeight)\nlibrary(ggplot2)\nlibrary(paletteer)\nlibrary(ggthemes)\n# basic_line ----\nusbirth_1994_2014 <- fivethirtyeight::US_births_2000_2014 |>\n    dplyr::bind_rows(fivethirtyeight::US_births_1994_2003) |> \n    dplyr::mutate(\n        day_category = case_when(\n            day_of_week %in% c(\"Sun\", \"Sat\") ~ \"Weekend\",\n            day_of_week %nin% c(\"Sun\", \"Sat\") ~ \"Weekday\",\n            TRUE ~ NA_character_\n        ),\n        month = dplyr::if_else(\n            condition = month < 10,\n            true = paste0(\"0\", month),\n            false = as.character(month)\n        ),\n        yr_mnth = paste0(year, \"-\", month),\n        yr_mnth = lubridate::ym(yr_mnth),\n        yr_qtr = paste0(lubridate::year(date),\n                              \"/0\", \n                              quarter(date)),\n        yr_qtr = factor(yr_qtr, ordered = TRUE)\n    )\n## basic_line data ----\navg_birth_day_cat_yr <- usbirth_1994_2014 |>\n    dplyr::group_by(year, day_category) |>\n    dplyr::summarise(avg_births = mean(births, na.rm = TRUE)) |>\n    dplyr::ungroup() \n## basic_line graph ----\nggp2_line <- ggplot(data = avg_birth_day_cat_yr, \n       mapping = aes(x = year, \n                     y = avg_births, \n                     group = day_category)) + \n    geom_line(aes(color = day_category)) \nbasic_line <- ggp2_line + \n    theme(axis.text = element_blank(), \n          legend.position = \"none\",\n          legend.title = element_blank(),\n          legend.text = element_blank())\n# grp_line -----\n## grp_line data ----\navg_births_dow_qtr <- usbirth_1994_2014 |>\n    dplyr::filter(year >= 2007 & year < 2009) |>\n    dplyr::group_by(yr_qtr, day_of_week) |>\n    dplyr::summarise(avg_births = mean(births, na.rm = TRUE)) |>\n    dplyr::ungroup()\n## grp_line graph ----\nggp2_line_grp <- ggplot2::ggplot(data = avg_births_dow_qtr,\n       mapping = aes(x = yr_qtr,\n                     y = avg_births,\n                     group = day_of_week)) +\n        geom_line(aes(color = day_of_week))\ngrp_line <- ggp2_line_grp +\n    theme(axis.text = element_blank(),\n          legend.text = element_blank(),\n          legend.position = \"none\",\n          legend.title = element_blank())\n# pal_line -----\n## pal_line data\navg_births_dow_mnth <- usbirth_1994_2014 |>\n    dplyr::filter(date > lubridate::as_date(\"2003-01-01\") &\n            date < lubridate::as_date(\"2003-06-01\")) |>\n    dplyr::group_by(yr_mnth, day_category, day_of_week) |>\n    dplyr::summarise(avg_births = mean(births, na.rm = TRUE)) |>\n    dplyr::ungroup()\n# level order\nlev_order <- levels(avg_births_dow_mnth$day_of_week)\n# levels\nggp2_line_pal <- ggplot(data = dplyr::filter(avg_births_dow_mnth,\n                        day_of_week %in% c(\"Tues\", \"Wed\", \"Thurs\"))) +\n                geom_line(aes(x = yr_mnth,\n                            y = avg_births,\n                            group = day_of_week,\n                            color = day_of_week),\n                            alpha = 1 / 5,\n                            linewidth = 1.4) +\n                geom_line(data = dplyr::filter(avg_births_dow_mnth,\n                        day_of_week %in% c(\"Sat\", \"Sun\")),\n                       aes(x = yr_mnth,\n                           y = avg_births,\n                           group = day_of_week,\n                           color = day_of_week),\n                           alpha = 1 / 2,\n                           linewidth = 1.0,\n                           linetype = \"longdash\") +\n                geom_line(data = dplyr::filter(avg_births_dow_mnth,\n                        day_of_week %in% c(\"Mon\", \"Fri\")),\n                        aes(x = yr_mnth,\n                           y = avg_births,\n                           group = day_of_week,\n                           color = day_of_week),\n                           linewidth = 1.0) + \n                scale_color_manual(breaks = lev_order,\n                values = paletteer::paletteer_d(\n                    palette = \"ggthemes::Color_Blind\", \n                    n = 7))\n# all four layers\npal_line <- ggp2_line_pal +\n    theme(axis.text = element_blank(),\n          legend.text = element_blank(),\n          legend.background = element_blank(),\n          legend.position = \"none\",\n          legend.key = element_blank(),\n          legend.title = element_blank())\n# facet_line -----\n## facet_line data ----\nmed_births_dcat_dow_mnth <- usbirth_1994_2014 |>\n    dplyr::filter(date >= lubridate::as_date(\"2008-07-01\") &\n            date < lubridate::as_date(\"2010-01-01\")) |>\n    dplyr::group_by(date, day_category, day_of_week) |>\n    dplyr::summarise(med_births = median(births, na.rm = TRUE)) |>\n    dplyr::ungroup()\n# glimpse(avg_births_dcat_dow_mnth)\n## facet_line graph ----\nggp2_line_grp_facet <- ggplot(data = med_births_dcat_dow_mnth,\n    mapping = aes(x = date,\n        y = med_births,\n        group = day_of_week)) +\n    geom_line(aes(color = day_of_week)) +\n    scale_color_manual(values = c(\n        \"#30123B\", \"#4485F6\", \"#1AE4B6\",\n        \"#A1FB3E\", \"#FABA39\", \"#E3460B\", \"#7A0403\"\n    )) +\n    scale_y_continuous(\n        breaks = c(4000, 8000, 12000, 16000),\n        labels = c('4000', '8000', '12000', '16000')\n    ) +\n    scale_x_date(date_breaks = \"1 year\",\n        date_labels = c(\"2008\", \"2009\", \"2010\")) +\n    facet_grid(day_of_week ~ day_category,\n        shrink = TRUE)\n\nfacet_line <- ggp2_line_grp_facet +\n    theme(axis.text = element_blank(),\n          legend.text = element_blank(),\n          legend.position = \"none\",\n          strip.text = element_blank(),\n          strip.background = element_blank(),\n          legend.title = element_blank())\n# final graphs ----\nggp2_basic <- basic_line + \n    theme_void() +\n    theme(legend.position = \"none\") +\n    ggplot2::labs(y = \"Y\", x = \"Time\")\nggp2_grp <- grp_line + \n    theme_void() +\n    theme(legend.position = \"none\") +\n    ggplot2::labs(y = \"Y\", x = \"Time\")\nggp2_pal <- pal_line + \n    theme_void() +\n    theme(legend.position = \"none\") +\n    ggplot2::labs(y = \"Y\", x = \"Time\")\nggp2_facet <- facet_line + \n    theme_void() +\n    theme(legend.position = \"none\", \n        strip.text = element_blank()) +\n    ggplot2::labs(y = \"Y\", x = \"Time\")\nggp2_basic + ggp2_grp + ggp2_pal + ggp2_facet +\n    patchwork::plot_layout(nrow = 2)\n```\n\n::: {style=\"font-size: 1.10em; color: #007bff;\"}\n**This graph requires:**\n:::\n\n::: {style=\"font-size: 1.05em; color: #fa7b3c;\"}\n**`r emo::ji(\"check\")` a numeric (continuous) variable**\n:::\n\n::: {style=\"font-size: 1.05em; color: #fa7b3c;\"}\n**`r emo::ji(\"check\")` a numeric (date) variable**\n:::\n\n::: {style=\"font-size: 1.05em; color: #fa7b3c;\"}\n**`r emo::ji(\"check\")` at least one categorical variable**      \n:::\n\n::::\n\n## Description \n\nGrouped line graphs use color, line style, and faceting to show group changes over time for a continuous variable across categorical levels. \n\n## Getting set up \n\n:::: {.panel-tabset}\n\n### Packages\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**PACKAGES:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nInstall packages.\n:::\n\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: pkg_code_line_graph\n#| code-fold: show\n#| eval: false\n#| echo: true\n#| warning: false\n#| message: false\n#| results: hide\ninstall.packages(\"fivethirtyeight\")\nlibrary(fivethirtyeight)\nlibrary(ggplot2)\n```\n:::\n\n### Data\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {.column-margin}\n![](www/538.png){fig-align=\"right\" width=\"40%\" height=\"40%\"}\n:::\n\n\n::: {style=\"font-size: 0.85em;\"}\nWe'll be using the `US_births_1994_2003` and `US_births_2000_2014` datasets from the `fivethirtyeight` package: \n\n  - Binding these together (they have identical columns)  \n\n  - Create a `day_category` variable that distinguishes between weekdays (`Weekends`) and weekends (`Weekday`)  \n\n  - Use `year` and `month`  to create `yr_mnth`  \n\n  - Use `year` and `quarter` to create `yr_qtr` \n\nSave these changes to `usbirth_1994_2014`:\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: data_usbirth_1994_2014\n#| code-fold: show\n#| eval: true\n#| echo: true\nUS_births_2004_2014 <- filter(fivethirtyeight::US_births_2000_2014, year > 2003)\nusbirth_1994_2014 <- US_births_2004_2014 |>\n    dplyr::bind_rows(fivethirtyeight::US_births_1994_2003) |> \n    dplyr::mutate(\n        day_category = case_when(\n            day_of_week %in% c(\"Sun\", \"Sat\") ~ \"Weekend\",\n            day_of_week %nin% c(\"Sun\", \"Sat\") ~ \"Weekday\",\n            TRUE ~ NA_character_\n        ),\n        month = dplyr::if_else(\n            condition = month < 10,\n            true = paste0(\"0\", month),\n            false = as.character(month)\n        ),\n        yr_mnth = paste0(year, \"-\", month),\n        yr_mnth = lubridate::ym(yr_mnth),\n        yr_qtr = paste0(lubridate::year(date),\n                              \"/0\", \n                              quarter(date)),\n        yr_qtr = factor(yr_qtr, ordered = TRUE)\n    )\ndplyr::glimpse(usbirth_1994_2014)\n```\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nWe'll use these data in the *More info* section for more line graphs, but for now:\n\n- Group `usbirth_1994_2014` on `year` and `day_category`   \n\n- Calculate the average `births` as `avg_births`  \n\nStore the data in `avg_birth_day_cat_yr`:\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: data_avg_birth_day_cat_yr\n#| code-fold: show\n#| eval: true\n#| echo: true\navg_birth_day_cat_yr <- usbirth_1994_2014 |>\n    dplyr::group_by(year, day_category) |>\n    dplyr::summarise(avg_births = mean(births, na.rm = TRUE)) |>\n    dplyr::ungroup() \ndplyr::glimpse(avg_birth_day_cat_yr)\n```\n:::\n\n::::\n\n## The grammar\n\n:::: {.panel-tabset}\n\n### Code\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**CODE:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\nCreate labels with `labs()`   \n\nMap `yr_mnth` to the `x`, `avg_births` to the `y`, and `day_category` to `group`\n\nAdd the `geom_line()` layer and map `day_category` to color (*inside* `aes()`)\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: code_graph_line\n#| code-fold: show\n#| eval: false\n#| echo: true \n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\nlabs_line_graph <- labs(title = \"Average US births\", \n                        subtitle = \"1994-2014\",\n                        y = \"Average number of US births\",\n                        x = \"Year\",  \n                        color = \"Day Category\")\n\nggp2_line <- ggplot(data = avg_birth_day_cat_yr, \n       mapping = aes(x = year, \n                     y = avg_births, \n                     group = day_category)) + \n    geom_line(aes(color = day_category)) \nggp2_line + \n    labs_line_graph\n```\n:::\n\n### Graph\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**GRAPH:**\n:::\n\n```{r}\n#| label: create_graph_line\n#| eval: true\n#| echo: false\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n#| layout-nrow: 1\n#| column: page-inset-right\nlabs_line_graph <- labs(title = \"Average US births\", \n                        subtitle = \"1994-2014\",\n                        y = \"Average number of US births\", \n                        x = \"Year\",  \n                        color = \"Day Category\")\n\nggp2_line <- ggplot(data = avg_birth_day_cat_yr, \n       mapping = aes(x = year, \n                     y = avg_births, \n                     group = day_category)) + \n    geom_line(aes(color = day_category)) \nggp2_line + \n    labs_line_graph\n```\n\n::::\n\n\n## More info\n\nLine graphs are great for displaying relationships across variables with multiple groups (or levels). We can also use facets for multiple comparisons (i.e., small multiples).\n\n:::: {.panel-tabset}\n\n### Groups\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nIn the previous graph, we can see the number of births begins to decline around `2007` or `2008`.  We'll create another summarized dataset from the `usbirth_2010_2014` data, but this time we restrict the observations to only births in between `2008` and `2009`, group on `yr_qtr` and `day_of_week`, and get the average number of `births` (as `avg_births`).\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: avg_births_dow_qtr\n#| code-fold: true\n#| eval: true\n#| echo: true \n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\navg_births_dow_qtr <- usbirth_1994_2014 |>\n    dplyr::filter(year >= 2008 & year <= 2009) |> \n    dplyr::group_by(yr_qtr, day_of_week) |>\n    dplyr::summarise(avg_births = mean(births, na.rm = TRUE)) |>\n    dplyr::ungroup() \ndplyr::glimpse(avg_births_dow_qtr)\n```\n:::\n\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**GROUPS:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\nNow when we create our line graph, we will have a categorical variable with seven levels (`day_of_week`):\n\n  + Create subtitle using `paste0()` to ensure it's accurate if/when the underlying data is updated.   \n  +  move the legend to the top of the graph using  `theme(legend.position = \"top\")` (to improve readability).   \n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: labs_line_graph_grp\n#| eval: true\n#| echo: true \n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n#| layout-nrow: 1\n#| column: page-inset-right\n# here we create the labels (with the subtitle updating with the data)\nlabs_line_graph_grp <- labs(title = \"Average US births\", \n                        subtitle = paste0(\"Between \",\n                                    min(avg_births_dow_qtr$yr_qtr), \n                                    \" and \",\n                                    max(avg_births_dow_qtr$yr_qtr)),\n                        y = \"Average births\", \n                        x = \"Year/Quarter\",  \n                        color = \"Day of Week\")\n```\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: avg_births_dow_qtr_grp_line\n#| eval: true\n#| echo: true \n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n#| layout-nrow: 1\n#| column: page-inset-right\n# Build layer with yr_qtr and day_of_week\nggp2_line_grp <- ggplot(data = avg_births_dow_qtr, \n                   mapping = aes(x = yr_qtr, \n                                 y = avg_births, \n                                 group = day_of_week)) + \n        geom_line(aes(color = day_of_week)) \n# move legend\nggp2_line_grp + \n    labs_line_graph_grp + \n    theme(legend.position = \"top\")\n```\n:::\n\n### Line Styles\n\n::: {style=\"font-size: 0.85em;\"}\nWe can make it easier to distinguish between lines in our graph by adjusting the line style (`linetype` and `linewidth`), or by changing overall opacity (`alpha`).\n\nWe'll work through some examples below using another subset from `usbirth_1994_2014`.\n:::\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: avg_births_dow_mnth\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n#| layout-nrow: 1\n#| column: page-inset-right\navg_births_dow_mnth <- usbirth_1994_2014 |>\n    dplyr::filter(year >= 2008 & year < 2010) |>\n    dplyr::group_by(yr_mnth, day_of_week) |>\n    dplyr::summarise(avg_births = mean(births, na.rm = TRUE)) |>\n    dplyr::ungroup()\ndplyr::glimpse(avg_births_dow_mnth)\n```\n:::\n\n\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: labs_line_styles\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n#| layout-nrow: 1\n#| column: page-inset-right\nlabs_line_styles <- labs(\n    title = \"Average US births\",\n    subtitle = paste0(\n        \"Between \",\n        min(avg_births_dow_mnth$yr_mnth),\n        \" and \",\n        max(avg_births_dow_mnth$yr_mnth)\n    ),\n    y = \"Average births\",\n    x = \"Year-Month\",\n    color = \"Day of Week\"\n)\n```\n:::\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**`alpha` & `linewidth`:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nColor palettes are a excellent too for highlighting or emphasizing certain lines over others.\n \nWe'll start by creating a line graph layer for Monday (`\"Mon\"`), Thursday (`\"Thurs\"`), and Friday (`\"Fri\"`) adjusting the opacity with `alpha`.\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: ggp2_line_mon_thur_fri\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n#| layout-nrow: 1\n#| column: page-inset-right\nggp2_line_mon_thur_fri <-\n    ggplot(data = dplyr::filter(avg_births_dow_mnth,\n        day_of_week %in% c(\"Mon\", \"Thurs\", \"Fri\"))) +\n    geom_line(\n        aes(x = yr_mnth,\n            y = avg_births,\n            group = day_of_week,\n            color = day_of_week),\n        alpha = 1 / 4,\n        linewidth = 0.85)\n# layer 1\nggp2_line_mon_thur_fri +\n    labs_line_styles +\n    theme(legend.position = \"top\")\n```\n:::\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**`linetype`:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nThen we'll change the `linetype` of Saturday and Sunday to `\"longdash'` (and make this *somewhat* transparent with a slightly higher `alpha`).\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: ggp2_line_sat_sun\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n#| layout-nrow: 1\n#| column: page-inset-right\nggp2_line_sat_sun <- ggp2_line_mon_thur_fri +\n    geom_line(data = dplyr::filter(avg_births_dow_mnth,\n            day_of_week %in% c(\"Sat\", \"Sun\")),\n        aes(x = yr_mnth,\n            y = avg_births,\n            group = day_of_week,\n            color = day_of_week),\n        alpha = 1 / 2,\n        linewidth = 0.75,\n        linetype = \"longdash\")\n# layers 1 & 2\nggp2_line_sat_sun +\n    labs_line_styles +\n    theme(legend.position = \"top\")\n```\n:::\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**Color palettes:**\n:::\n\n\n::: {style=\"font-size: 0.85em;\"}\nAdd `geom_line()` for Wednesday and Tuesday, but change the color pallete with `paletteer` and `ggthemes`. \n\nWe also manually set the legend order by supplying the original factor levels to the `breaks` argument. \n:::\n\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: ggp2_line_pal_d\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n#| layout-nrow: 1\n#| column: page-inset-right\nlibrary(paletteer)\nlibrary(ggthemes)\n# original factor levels\nlev_order <- levels(avg_births_dow_mnth$day_of_week)\n# layer 3\nggp2_line_pal_d <- ggp2_line_sat_sun +\n    # add line\n    geom_line(data = dplyr::filter(avg_births_dow_mnth,\n            day_of_week %in% c(\"Wed\", \"Tues\")),\n        aes(x = yr_mnth,\n            y = avg_births,\n            group = day_of_week,\n            color = day_of_week),\n        linewidth = 1.25) +\n    # add palette\n    ggplot2::scale_color_manual(\n        breaks = lev_order,\n        # original factor levels\n        values = paletteer::paletteer_d(palette = \"ggthemes::Color_Blind\",\n            n = 7))\n# three layers\nggp2_line_pal_d +\n    # labels\n    labs_line_styles +\n    # legend position\n    theme(legend.position = \"top\")\n```\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nChanging the look of the lines is a great way to highlight or emphasize some lines over others.\n:::\n\n### Labels\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**LABELS:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nIn the previous graph, we can see the number of average births reaches it's peak in  `2008` or `2009`, so we'll use labels to display the max births and max average births. \n\nTo accomplish this, we're going to create two small tables of labels, `label_max_dow` and `label_max_avg_dow`, that we'll use to label the maximum values. \n\nThey will each have 7 rows (one for each day of the week) and a label variable (`lbl`) which we can use with `geom_label()`.\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: label_max_dow\n#| eval: false\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\nlabel_max_dow <- usbirth_1994_2014 |>\n    dplyr::group_by(day_of_week) |>\n    dplyr::summarise(max_births = max(births, na.rm = TRUE)) |>\n    dplyr::ungroup() |>\n    dplyr::arrange(desc(max_births)) |>\n    dplyr::inner_join(y = usbirth_1994_2014,\n        by = c(\"max_births\" = \"births\", \"day_of_week\")) |>\n    dplyr::mutate(lbl = paste0(day_of_week,\n        \" (\",\n        date,\n        \" )\",\n        \", max births = \",\n        max_births)) |>\n    dplyr::select(day_of_week, yr_mnth, max_births, lbl)\n\ndplyr::arrange(label_max_dow, desc(max_births)) |>\n    dplyr::slice(1:2)\n```\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: label_max_dow_show\n#| eval: true\n#| echo: false\nlabel_max_dow <- usbirth_1994_2014 |>\n    dplyr::group_by(day_of_week) |>\n    dplyr::summarise(max_births = max(births, na.rm = TRUE)) |>\n    dplyr::ungroup() |>\n    dplyr::arrange(desc(max_births)) |>\n    dplyr::inner_join(y = usbirth_1994_2014,\n        by = c(\"max_births\" = \"births\", \"day_of_week\")) |>\n    dplyr::mutate(lbl = paste0(day_of_week,\n        \" (\",\n        date,\n        \" )\",\n        \", max births = \",\n        max_births)) |>\n    dplyr::select(day_of_week, yr_mnth, max_births, lbl)\n\ndplyr::arrange(label_max_dow, desc(max_births)) |>\n    dplyr::slice(1:2) |> rmarkdown::paged_table()\n```\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: label_max_avg_dow\n#| eval: false\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\nlabel_max_avg_dow <- avg_births_dow_mnth |>\n    # group by mon-sun\n    dplyr::group_by(day_of_week) |>\n    # get max avg\n    dplyr::summarise(max_avg_births = max(avg_births, na.rm = TRUE)) |>\n    # ungroup\n    dplyr::ungroup() |>\n    # join back to table\n    dplyr::inner_join(y = avg_births_dow_mnth,\n        by = \"day_of_week\") |>\n    # check for max\n    dplyr::mutate(is_max = case_when(\n        avg_births == max_avg_births ~ TRUE,\n        avg_births != max_avg_births ~ FALSE,\n    )) |>\n    # remove non-maxes\n    filter(is_max == TRUE) |>\n    dplyr::mutate(lbl = paste0(day_of_week,\n        \": Max avg births = \",\n        max_avg_births)) |>\n    # reduce\n    select(day_of_week, yr_mnth, max_avg_births, lbl)\ndplyr::arrange(label_max_avg_dow, desc(max_avg_births)) |>\n    dplyr::slice(1:2)\n```\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: label_max_avg_dow_show\n#| eval: true\n#| echo: false\nlabel_max_avg_dow <- avg_births_dow_mnth |>\n    # group by mon-sun\n    dplyr::group_by(day_of_week) |>\n    # get max avg\n    dplyr::summarise(max_avg_births = max(avg_births, na.rm = TRUE)) |>\n    # ungroup\n    dplyr::ungroup() |>\n    # join back to table\n    dplyr::inner_join(y = avg_births_dow_mnth,\n        by = \"day_of_week\") |>\n    # check for max\n    dplyr::mutate(is_max = case_when(\n        avg_births == max_avg_births ~ TRUE,\n        avg_births != max_avg_births ~ FALSE,\n    )) |>\n    # remove non-maxes\n    filter(is_max == TRUE) |>\n    dplyr::mutate(lbl = paste0(day_of_week,\n        \": Max avg births = \",\n        max_avg_births)) |>\n    # reduce\n    select(day_of_week, yr_mnth, max_avg_births, lbl)\ndplyr::arrange(label_max_avg_dow, desc(max_avg_births)) |>\n    dplyr::slice(1:2) |> rmarkdown::paged_table()\n```\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nNow that we have label tables for each metric, we can filter them to the days we want to label. \n\nWe'll use `filter()` to get the maximum values for `\"Wed\"` (in `label_max_wed_dow` and `label_max_avg_wed_dow`):\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: label_wed_tues_dow\n#| eval: false\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n# get wed\nlabel_max_wed_dow <- label_max_dow |>\n    filter(day_of_week == \"Wed\")\nlabel_max_wed_dow\nlabel_max_avg_wed_dow <- label_max_avg_dow |>\n    filter(day_of_week == \"Wed\")\nlabel_max_avg_wed_dow\n```\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: label_wed_tues_dow_show\n#| eval: true\n#| echo: false\nlabel_max_wed_dow <- label_max_dow |>\n    filter(day_of_week == \"Wed\")\nlabel_max_wed_dow |> rmarkdown::paged_table()\nlabel_max_avg_wed_dow <- label_max_avg_dow |>\n    filter(day_of_week == \"Wed\")\nlabel_max_avg_wed_dow |> rmarkdown::paged_table()\n```\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nAdd `geom_point()` and `geom_label()` for Wednesday. \n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: ggp2_line_wed_births_lbl\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n#| layout-nrow: 1\n#| column: page-inset-right\n# point for max births/day\nggp2_line_wed_max_births_pnts <- geom_point(\n    data = label_max_wed_dow,\n    aes(x = yr_mnth,\n        y = max_births,\n        color = day_of_week),\n    size = 2.5,\n    show.legend = FALSE)\n\nggp2_line_wed_max_avg_births_pnts <-\n    geom_point(\n        data = label_max_avg_wed_dow,\n        aes(x = yr_mnth,\n            y = max_avg_births,\n            color = day_of_week),\n        size = 2.5,\n        alpha = 1/2,\n        show.legend = FALSE)\n\nggp2_line_wed_max_births_lbl <- geom_label(\n    data = label_max_wed_dow,\n    aes(x = yr_mnth,\n        y = max_births,\n        label = lbl,\n        color = day_of_week),\n    fill = \"#ffffff\",\n    nudge_y = -480,\n    nudge_x = 25,\n    size = 1.3,\n    show.legend = FALSE)\n\nggp2_line_wed_max_avg_births_lbl <-\n    geom_label(data = label_max_avg_wed_dow,\n        aes(x = yr_mnth,\n            y = max_avg_births,\n            label = lbl,\n            color = day_of_week),\n        fill = \"#ffffff\",\n        nudge_y = 145,\n        nudge_x = 85,\n        size = 1.3,\n        show.legend = FALSE)\n\nggp2_line_pal_d + \n    ggp2_line_wed_max_births_pnts + \n    ggp2_line_wed_max_avg_births_pnts +\n    ggp2_line_wed_max_births_lbl + \n    ggp2_line_wed_max_avg_births_lbl + \n    # add labels\n    labs_line_styles +\n    # move legend to top\n    theme(legend.position = \"top\")\n```\n:::\n\n\n::: {style=\"font-size: 0.85em;\"}\nWe'll use `filter()` to get the maximum values for `\"Tues\"` (in `label_max_tues_dow` and `label_max_avg_tues_dow`):\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: label_max_tues_dow_label_max_avg_tues_dow\n#| eval: false\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n# point for max births/day\n# get tues\nlabel_max_tues_dow <- label_max_dow |> \n    filter(day_of_week == \"Tues\")\nlabel_max_tues_dow\nlabel_max_avg_tues_dow <- label_max_avg_dow |> \n    filter(day_of_week == \"Tues\")\nlabel_max_avg_tues_dow\n```\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: label_max_tues_dow_label_max_avg_tues_dow_show\n#| eval: true\n#| echo: false\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n# point for max births/day\n# get tues\nlabel_max_tues_dow <- label_max_dow |> \n    filter(day_of_week == \"Tues\")\nlabel_max_tues_dow |> rmarkdown::paged_table()\nlabel_max_avg_tues_dow <- label_max_avg_dow |> \n    filter(day_of_week == \"Tues\")\nlabel_max_avg_tues_dow |> rmarkdown::paged_table()\n```\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nAdd `geom_point()` and `geom_label()` for Tuesday.  \n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: ggp2_line_min_births_lbl\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n#| layout-nrow: 1\n#| column: page-inset-right\n# point for max births/day\nggp2_line_tues_max_births_pnts <-\n    geom_point(data = label_max_tues_dow,\n        aes(x = yr_mnth,\n            y = max_births,\n            color = day_of_week),\n        size = 2.5,\n        show.legend = FALSE)\n\nggp2_line_tues_max_avg_births_pnts <-\n    geom_point(\n        data = label_max_avg_tues_dow,\n        aes(x = yr_mnth,\n            y = max_avg_births,\n            color = day_of_week),\n        size = 2.5,\n        alpha = 1/2,\n        show.legend = FALSE)\n\nggp2_line_tues_max_births_lbl <-\n    geom_label(data = label_max_tues_dow,\n        aes(x = yr_mnth,\n            y = max_births,\n            label = lbl,\n            color = day_of_week),\n        fill = \"#ffffff\",\n        nudge_y = -480,\n        nudge_x = 50,\n        size = 1.3,\n        show.legend = FALSE)\n\nggp2_line_tues_max_avg_births_lbl <-\n    geom_label(data = label_max_avg_tues_dow,\n        aes(x = yr_mnth,\n            y = max_avg_births,\n            label = lbl,\n            color = day_of_week),\n        fill = \"#ffffff\",\n        nudge_y = 300,\n        nudge_x = -80,\n        size = 1.3,\n        show.legend = FALSE)\n\n\nggp2_line_pal_d + \n    # wednesday layers \n    ggp2_line_wed_max_births_pnts + \n    ggp2_line_wed_max_avg_births_pnts +\n    ggp2_line_wed_max_births_lbl + \n    ggp2_line_wed_max_avg_births_lbl +\n    # tuesday layers \n    ggp2_line_tues_max_births_pnts + \n    ggp2_line_tues_max_avg_births_pnts +\n    ggp2_line_tues_max_births_lbl + \n    ggp2_line_tues_max_avg_births_lbl + \n    # add labels\n    labs_line_styles +\n    # move legend to top\n    theme(legend.position = \"top\")\n```\n:::\n\n### Facets\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nFinally, we can use facets to view each of the line graphs seperately (or small multiples). \n\nWe'll create a dataset with the dates limited to births between `2008-07-01` and `2010-01-01`, and calculate the median births, grouped by `date`, `day_category`, and `day_of_week` and store it as `med_births_dcat_dow_mnth`.\n:::\n\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: max_births_dcat_dow_mnth\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\nmed_births_dcat_dow_mnth <- usbirth_1994_2014 |>\n    dplyr::filter(date >= lubridate::as_date(\"2008-07-01\") &\n            date < lubridate::as_date(\"2010-01-01\")) |>\n    dplyr::group_by(date, day_category, day_of_week) |>\n    dplyr::summarise(med_births = median(births, na.rm = TRUE)) |>\n    dplyr::ungroup()\ndplyr::glimpse(med_births_dcat_dow_mnth)\n```\n:::\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**FACETS:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nUsing `facet_wrap()` with a single categorical variable (`. ~ var`) will create a plot for each discrete level, while `facet_grid()` will create a level-by-level grid (specified as `var ~ var`).\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: ggp2_line_facet_wrap\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n#| layout-nrow: 1\n#| column: page-inset-right\n# labels\nlabs_line_graph_facet_wrap <- labs(\n    title = \"Median US births\",\n    subtitle = paste0(\n        \"Between \",\n        min(med_births_dcat_dow_mnth$date),\n        \" and \",\n        max(med_births_dcat_dow_mnth$date)\n    ),\n    y = \"Median births\",\n    x = \"Date\",\n    color = \"Day of Week\"\n)\n# layer\nggp2_line_facet_wrap <- ggplot(data = med_births_dcat_dow_mnth,\n    mapping = aes(x = date,\n        y = med_births,\n        group = day_of_week)) +\n    geom_line(aes(color = day_of_week)) +\n    scale_color_manual(values = c(\n        \"#30123B\", \"#4485F6\", \"#1AE4B6\",\n        \"#A1FB3E\", \"#FABA39\", \"#E3460B\", \"#7A0403\"\n    )) +\n    scale_y_continuous(\n        breaks = c(4000, 8000, 12000, 16000),\n        labels = c('4000', '8000', '12000', '16000')\n    ) +\n    scale_x_date(date_breaks = \"1 year\",\n        date_labels = c(\"2008\", \"2009\", \"2010\")) +\n    facet_wrap(day_of_week ~ ., shrink = TRUE)\n\nggp2_line_facet_wrap +\n    labs_line_graph_facet_wrap +\n    theme(legend.position = \"top\")\n```\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nIt's always a good idea to check the `x` and `y` axis text when using facets. I've adjusted the `x` and `y` axes above using `scale_y_continuous()` and `scale_x_date()` before adding `facet_wrap()`\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n```{r}\n#| label: ggp2_line_facet_grid\n#| eval: true\n#| echo: true\n#| warning: false\n#| message: false\n#| out-height: '100%'\n#| out-width: '100%'\n#| layout-nrow: 1\n#| column: page-inset-right\n# labels\nlabs_line_graph_facet_grid <- labs(\n    title = \"Median US births\",\n    subtitle = paste0(\n        \"Between \",\n        min(med_births_dcat_dow_mnth$date),\n        \" and \",\n        max(med_births_dcat_dow_mnth$date)\n    ),\n    y = \"Median births\",\n    x = \"Date\",\n    color = \"Day of Week\"\n)\n# layer\nggp2_line_facet_grid <- ggplot(data = med_births_dcat_dow_mnth,\n    mapping = aes(x = date,\n        y = med_births,\n        group = day_of_week)) +\n    geom_line(aes(color = day_of_week)) +\n    scale_color_manual(values = c(\n        \"#30123B\", \"#4485F6\", \"#1AE4B6\",\n        \"#A1FB3E\", \"#FABA39\", \"#E3460B\", \"#7A0403\"\n    )) +\n    scale_y_continuous(\n        breaks = c(4000, 8000, 12000, 16000),\n        labels = c('4000', '8000', '12000', '16000')\n    ) +\n    scale_x_date(date_breaks = \"1 year\",\n        date_labels = c(\"2008\", \"2009\", \"2010\")) +\n    facet_grid(day_of_week ~ day_category,\n        shrink = TRUE)\n\nggp2_line_facet_grid +\n    labs_line_graph_facet_grid\n```\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nThe colors have been manually, using `scale_color_manual()` and passing seven color hex codes to the `values` argument. \n:::\n\n::::\n\n\n\n\n\n\n\n\n\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"arrow","toc":true,"toc-depth":5,"number-sections":true,"dpi":320,"output-file":"grp_line_graphs.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["references.bib"],"theme":["cosmo","custom.scss"],"toc-location":"right","toc-title":"Contents","code-block-bg":"#f8f8f8","code-block-border-left":"#99bbc9","code-annotations":"hover","callout-appearance":"simple","code-summary":"show/hide","fig-asp":0.618,"fontsize":"1.085em","linestretch":1.25},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}