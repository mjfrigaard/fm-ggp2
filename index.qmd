# Welcome! {.unnumbered}

```{r}
#| label: setup
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(lubridate)
library(scales)
library(knitr)
library(kableExtra)
library(colorblindr)
library(downlit)
# _common.R ----
source("_common.R")
# use font
showtext::showtext_auto()
# set theme
ggplot2::theme_set(theme_ggp2g(
    base_size = 15))
```



Welcome to the `ggplot2` field manual! This resource was created to serve as a bookmark/quick reference for building graphs with `ggplot2`.

## Intent

This manual was written to help answer questions like, 

  - "*What graph should I use?*"    
  
  - "*Can I build this graph (given the data I have)?*"   
  
  - *What was the name of that visualization I saw on [#TidyTuesday](https://twitter.com/search?lang=en&q=%23tidytuesday)*?
  
## Get started

In order to maximize reproducibility, this manual only relies on a few packages:

### Install `ggplot2` (option 1)

Install `ggplot2` and the data packages using the code below:

::: {.column-margin}
![](www/ggplot2.png){fig-align="center" width="40%" height="40%"}
:::

```{r}
#| label: ggp2-pkg
#| eval: false
#| echo: true
#| code-fold: show
data_pkgs <- c("palmerpenguins", "fivethirtyeight", "ggplot2movies", "babynames")
install.packages(data_pkgs)
install.packages("ggplot2")
library(ggplot2)
library(palmerpenguins)
library(fivethirtyeight)
library(ggplot2movies)
library(babynames)
```

### Install `tidyverse` (option 2)

`ggplot2` is part of the `tidyverse`, but you can also install this package separately.

::: {.column-margin}
![](www/tidyverse.png){fig-align="center" width="40%" height="40%"}
:::

```{r}
#| label: tidyverse-pkg
#| eval: false
#| echo: true
#| code-fold: show
data_pkgs <- c("palmerpenguins", "fivethirtyeight", "ggplot2movies", "babynames")
install.packages("tidyverse")
library(tidyverse)
library(palmerpenguins)
library(fivethirtyeight)
library(ggplot2movies)
library(babynames)
```

## Graph Categories 

Graphs have been categorized into the following types (you can see them in the floating table of contents to your left).

- **Univariate**: if you have a single column you're trying to visualize 

- **Amounts**: counts or simple summary statistics of one or two columns in a dataset     

- **Proportions**: ratio displays of part-to-whole    

- **Distributions**: displaying the shape of a variable's values (normalcy, skewness, kurtosis, etc.)    

- **Dates & Times**: changes in quantitative or categorical variables over a dimension of time (date-time, date, year, month, quarter, etc.).

- **Relationships**: how does the change of values in variable `x` affect the values in variable `y` (and possibly `z`)?   

Some graphs can justifiably belong to more than one category, and wherever this is the case, I've tried to include links to other applications in the notes.

## The Data 

The data packages used in this manual are available to preview below. 

### `palmerpenguins::penguins`

The majority of the graphs in the manual are built using the `palmerpenguins::penguins` data. 

:::: {.column-margin}

::: {style="font-size: 0.95em; color: #282b2d;"}
***...so...many...PENGUINS!***
:::

![Artwork by allison_horst](www/lter_penguins.png){fig-align="center" width="50%" height="50%"}
::::

:::: {.callout-note collapse="true" icon=false}
## Expand to view the data in `palmerpenguins::penguins`

::: {style="font-size: 0.75em;"}
```{r}
#| label: paged_penguins
#| eval: true
#| echo: false
rmarkdown::paged_table(palmerpenguins::penguins)
```
:::

::::

Source: [https://github.com/allisonhorst/palmerpenguins/](https://github.com/allisonhorst/palmerpenguins/)

### `fivethirtyeight`

Use the table below to view the datasets in this package. 

::: {.column-margin}
![](www/538.png){fig-align="center" width="30%" height="30%"}
:::

:::: {.callout-note collapse="true" icon=false}
## Expand to view the data in the `fivethirtyeight` package

::: {style="font-size: 0.75em;"}
*To view a table of available datasets in the `fivethirtyeight` package, view the `Data Frame Name` and `Article Title` columns in the `datasets_master` table*
:::

::: {style="font-size: 0.80em;"}
```{r}
#| label: fivethirtyeight_pkg
#| eval: true
#| echo: false
#| message: false
#| warning: false
library(fivethirtyeight)
rmarkdown::paged_table(fivethirtyeight::datasets_master |> 
    select(`Data Frame Name`, `Article Title`))
```
:::
::::

Source: [https://github.com/fivethirtyeight/data](https://github.com/fivethirtyeight/data)

### `ggplot2movies::movies`

::: {.column-margin}
![](www/imdb.png){fig-align="center" width="30%" height="30%"}
:::

:::: {.callout-note collapse="true" icon=false}
## Expand to view *a sample* of the data in `ggplot2movies::movies`

::: {style="font-size: 0.75em;"}
```{r}
#| label: paged_ggplot2movies
#| eval: true
#| echo: false
rmarkdown::paged_table(x = 
    dplyr::slice_sample(ggplot2movies::movies, 
      n = 1000, replace = FALSE))
```
:::

::::

Source: [https://www.imdb.com/](https://www.imdb.com/)

### `babynames::babynames`

::: {.column-margin}
![](www/ssa.png){fig-align="center" width="40%" height="40%"}
:::

:::: {.callout-note collapse="true" icon=false}
## Expand to view *a sample* of the data in `babynames::babynames`

::: {style="font-size: 0.75em;"}
```{r}
#| label: paged_babynames
#| eval: true
#| echo: false
rmarkdown::paged_table(x = 
    dplyr::slice_sample(babynames::babynames, 
      n = 1000, replace = FALSE))
```
:::
::::

Source: [http://www.ssa.gov/oact/babynames/limits.html](http://www.ssa.gov/oact/babynames/limits.html)

***Why not manually create the graph datasets with `data.frame()` or `tibble()`/`tribble()`?*** 

In my opinion, using manually generated data is great for reproducible examples, but they rarely look like data 'caught in the wild.' The data packages above are also well maintained and can be used to provide a variety of examples.

## Assumptions 

The code and examples assume the reader has already answered the question, “*what kind of data do I have?*” 

If not, I highly recommend the [`skimr`](https://docs.ropensci.org/skimr/) and [`inspectdf`](https://alastairrushworth.github.io/inspectdf/) packages for getting to know your data better.

Another question to consider--but not covered in this manual--is, "*who will the audience be for this graph?*" 

Great resources for this include [Communicating with Data: The Art of Writing for Data Science](https://www.amazon.com/Communicating-Data-Art-Writing-Science/dp/0198862741) by Deborah Nolan and Sara Stoudt and [Truthful Art, The: Data, Charts, and Maps for Communication](https://www.amazon.com/Truthful-Art-Data-Charts-Communication/dp/0321934075/), by  Alberto Cairo.

## Who was this written for? 

I created this resource with the following [learner personas](http://teachtogether.tech/en/index.html#s:process-personas) in mind: 

1. **Garth** is a data analyst putting together a slide deck for an upcoming meeting. He had a few statistics courses with R in college, and has picked up additional experience and skills from the different positions he's held and various online tutorials. He's currently building the graphs in his slides with `ggplot2`, but had grown tired of them and would like to customize his presentation to make it more engaging. 

2. **Matilda** is a data journalist hoping to add a few graphs to a piece she has been working on. She has 10 years of experience working with WordPress, writes and publishes on her own blog, and has an intermediate understanding of HTML & CSS. However, she has only been programming in R for about 6 months.

3. **Igor** is a researcher who has been working in academia for 15 years. He's comfortable writing R code, knows the kinds of graphs he'd like to build, but he only knows how to build these using the [base R graphics](https://bookdown.org/rdpeng/exdata/the-base-plotting-system-1.html). He'd like to learn how to duplicate the graphs he's already created in base R using `ggplot2`.

### What's been left out?

Because this is intended to be a field manual (and not a textbook), I've omitted most of the underlying principles and structure of the `ggplot2` syntax. 

### Where can I find what's been left out?

If you're looking for a comprehensive resource on `ggplot2`, I recommend the [excellent free text](https://ggplot2-book.org/), the [`ggplot2` website](https://ggplot2.tidyverse.org/), and [Data Visualization: a practical guide](https://socviz.co/) by Kieran Healy. 

If you know the graph you'd like to build, and you're just looking for the code or package(s) to build it, I'd check out the [R graph gallery](https://r-graph-gallery.com/ggplot2-package.html) or [R graphics cookbook](https://r-graphics.org/). 

***

## Code style & structure

The field manual follows a [Rule of Least Power Principle](https://www.w3.org/2001/tag/doc/leastPower.html), in the sense that "*a language with a straightforward syntax may be easier to analyze than an otherwise equivalent one with more complex structure.*" 

In other words, assuming the reader has some understanding of R and the `tidyverse`, the code for each graph is meant to be read and understood *without* having to run it. 

Each graph has, at minimum, the following sections and tabs: 

1. **Graph info**  
   - *Should I use this graph?*  
   - *This graph requires:*  
2. **Description**     
3. **Getting set up**
   - *Packages and Data*   
     - Code for installing development version of packages (if necessary) for graphs *and* data   
     - Any steps used to create (i.e., manipulate and prepare) the data for the graph    
2. **The grammar**    
   - *Code to build the labels and graph layers*      
     - Graph labels have the `labs_` prefix     
     - Graph layers have a `ggp2_` prefix   
3. **More info**  
   - *Additional methods, arguments, or applications*      
     - Color palettes  
     - Complimentary packages  

**Code Style:**

I've attempted to balance brevity and clarity, but with the assumption that its best to err on the latter. I've also followed the general principle that if a graph can be *easily* built using one of `ggplot2` 's `geom_*` functions, that method is shown first. 

## Theme

The theme used in the graphs is custom and uses combined elements from `ggplot2::theme_minimal()` and `ggplot2::theme_void()`. View it [here](https://github.com/mjfrigaard/fm-ggp2/blob/main/R/theme_ggp2g.R).




