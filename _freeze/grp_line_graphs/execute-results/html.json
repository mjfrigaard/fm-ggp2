{
  "hash": "c538d87ec482a69095befb5d02836b3d",
  "result": {
    "markdown": "# Grouped line graphs {.unnumbered}\n\n\n\n\n\n::: {.callout-tip appearance='simple' icon=false}\n***This graph is largely complete and just needs final proof reading.*** \n:::\n\n\n\n:::: {.callout-note collapse=\"false\" icon=false}\n\n::: {style=\"font-size: 1.25em; color: #02577A;\"}\nGraph info\n:::\n\n<br>\n\n\n::: {.cell layout-align=\"right\"}\n::: {.cell-output-display}\n![](grp_line_graphs_files/figure-html/full_code_display-1.png){fig-align='right' width=60% height=60%}\n:::\n:::\n\n\n::: {style=\"font-size: 1.10em; color: #02577A;\"}\n**This graph requires:**\n:::\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ a numeric (continuous) variable**\n:::\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ a numeric (date) variable**\n:::\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ at least one categorical variable**      \n:::\n\n::::\n\n## Description \n\nGrouped line graphs use color, line style, and faceting to show group changes over time for a continuous variable across categorical levels. \n\n## Set up \n\n:::: {.panel-tabset}\n\n\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**PACKAGES:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nInstall packages.\n:::\n\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ninstall.packages(\"fivethirtyeight\")\nlibrary(fivethirtyeight)\nlibrary(ggplot2)\n```\n:::\n\n:::\n\n\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {.column-margin}\n![](www/538.png){fig-align=\"right\" width=\"40%\" height=\"40%\"}\n:::\n\n\n::: {style=\"font-size: 0.85em;\"}\nWe'll be using the `US_births_1994_2003` and `US_births_2000_2014` datasets from the `fivethirtyeight` package: \n\n  - Binding these together (they have identical columns)  \n\n  - Create a `day_category` variable that distinguishes between weekdays (`Weekends`) and weekends (`Weekday`)  \n\n  - Use `year` and `month`  to create `yr_mnth`  \n\n  - Use `year` and `quarter` to create `yr_qtr` \n\nSave these changes to `usbirth_1994_2014`:\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nUS_births_2004_2014 <- filter(fivethirtyeight::US_births_2000_2014, year > 2003)\nusbirth_1994_2014 <- US_births_2004_2014 |>\n    dplyr::bind_rows(fivethirtyeight::US_births_1994_2003) |> \n    dplyr::mutate(\n        day_category = case_when(\n            day_of_week %in% c(\"Sun\", \"Sat\") ~ \"Weekend\",\n            day_of_week %nin% c(\"Sun\", \"Sat\") ~ \"Weekday\",\n            TRUE ~ NA_character_\n        ),\n        month = dplyr::if_else(\n            condition = month < 10,\n            true = paste0(\"0\", month),\n            false = as.character(month)\n        ),\n        yr_mnth = paste0(year, \"-\", month),\n        yr_mnth = lubridate::ym(yr_mnth),\n        yr_qtr = paste0(lubridate::year(date),\n                              \"/0\", \n                              quarter(date)),\n        yr_qtr = factor(yr_qtr, ordered = TRUE)\n    )\ndplyr::glimpse(usbirth_1994_2014)\n#> Rows: 7,670\n#> Columns: 9\n#> $ year          <int> 2004, 2004, 2004, 2004, 2004, 2004, …\n#> $ month         <chr> \"01\", \"01\", \"01\", \"01\", \"01\", \"01\", …\n#> $ date_of_month <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1…\n#> $ date          <date> 2004-01-01, 2004-01-02, 2004-01-03,…\n#> $ day_of_week   <ord> Thurs, Fri, Sat, Sun, Mon, Tues, Wed…\n#> $ births        <int> 8205, 10586, 8337, 7359, 11489, 1275…\n#> $ day_category  <chr> \"Weekday\", \"Weekday\", \"Weekend\", \"We…\n#> $ yr_mnth       <date> 2004-01-01, 2004-01-01, 2004-01-01,…\n#> $ yr_qtr        <ord> 2004/01, 2004/01, 2004/01, 2004/01, …\n```\n:::\n\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nWe'll use these data in the *More info* section for more line graphs, but for now:\n\n- Group `usbirth_1994_2014` on `year` and `day_category`   \n\n- Calculate the average `births` as `avg_births`  \n\nStore the data in `avg_birth_day_cat_yr`:\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\navg_birth_day_cat_yr <- usbirth_1994_2014 |>\n    dplyr::group_by(year, day_category) |>\n    dplyr::summarise(avg_births = mean(births, na.rm = TRUE)) |>\n    dplyr::ungroup() \n#> `summarise()` has grouped output by 'year'. You can\n#> override using the `.groups` argument.\ndplyr::glimpse(avg_birth_day_cat_yr)\n#> Rows: 42\n#> Columns: 3\n#> $ year         <int> 1994, 1994, 1995, 1995, 1996, 1996, 1…\n#> $ day_category <chr> \"Weekday\", \"Weekend\", \"Weekday\", \"Wee…\n#> $ avg_births   <dbl> 11728.012, 8604.610, 11593.150, 8432.…\n```\n:::\n\n:::\n\n::::\n\n## Grammar\n\n:::: {.panel-tabset}\n\n\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**CODE:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\nCreate labels with `labs()`   \n\nMap `yr_mnth` to the `x`, `avg_births` to the `y`, and `day_category` to `group`\n\nAdd the `geom_line()` layer and map `day_category` to color (*inside* `aes()`)\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nlabs_line_graph <- labs(title = \"Average US births\", \n                        subtitle = \"1994-2014\",\n                        y = \"Average number of US births\",\n                        x = \"Year\",  \n                        color = \"Day Category\")\n\nggp2_line <- ggplot(data = avg_birth_day_cat_yr, \n       mapping = aes(x = year, \n                     y = avg_births, \n                     group = day_category)) + \n    geom_line(aes(color = day_category)) \nggp2_line + \n    labs_line_graph\n```\n:::\n\n:::\n\n\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**GRAPH:**\n:::\n\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n::: {.cell-output-display}\n![](grp_line_graphs_files/figure-html/create_graph_line-1.png){width=100% height=100%}\n:::\n:::\n\n\n::::\n\n\n## More info\n\nLine graphs are great for displaying relationships across variables with multiple groups (or levels). We can also use facets for multiple comparisons (i.e., small multiples).\n\n:::: {.panel-tabset}\n\n### Groups\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nIn the previous graph, we can see the number of births begins to decline around `2007` or `2008`.  We'll create another summarized dataset from the `usbirth_2010_2014` data, but this time we restrict the observations to only births in between `2008` and `2009`, group on `yr_qtr` and `day_of_week`, and get the average number of `births` (as `avg_births`).\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\navg_births_dow_qtr <- usbirth_1994_2014 |>\n    dplyr::filter(year >= 2008 & year <= 2009) |> \n    dplyr::group_by(yr_qtr, day_of_week) |>\n    dplyr::summarise(avg_births = mean(births, na.rm = TRUE)) |>\n    dplyr::ungroup() \ndplyr::glimpse(avg_births_dow_qtr)\n#> Rows: 56\n#> Columns: 3\n#> $ yr_qtr      <ord> 2008/01, 2008/01, 2008/01, 2008/01, 20…\n#> $ day_of_week <ord> Sun, Mon, Tues, Wed, Thurs, Fri, Sat, …\n#> $ avg_births  <dbl> 7497.231, 12464.385, 13099.692, 13139.…\n```\n:::\n\n:::\n\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**GROUPS:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\nNow when we create our line graph, we will have a categorical variable with seven levels (`day_of_week`):\n\n  + Create subtitle using `paste0()` to ensure it's accurate if/when the underlying data is updated.   \n  +  move the legend to the top of the graph using  `theme(legend.position = \"top\")` (to improve readability).   \n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\n# here we create the labels (with the subtitle updating with the data)\nlabs_line_graph_grp <- labs(title = \"Average US births\", \n                        subtitle = paste0(\"Between \",\n                                    min(avg_births_dow_qtr$yr_qtr), \n                                    \" and \",\n                                    max(avg_births_dow_qtr$yr_qtr)),\n                        y = \"Average births\", \n                        x = \"Year/Quarter\",  \n                        color = \"Day of Week\")\n```\n:::\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\n# Build layer with yr_qtr and day_of_week\nggp2_line_grp <- ggplot(data = avg_births_dow_qtr, \n                   mapping = aes(x = yr_qtr, \n                                 y = avg_births, \n                                 group = day_of_week)) + \n        geom_line(aes(color = day_of_week)) \n# move legend\nggp2_line_grp + \n    labs_line_graph_grp + \n    theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](grp_line_graphs_files/figure-html/avg_births_dow_qtr_grp_line-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n### Line Styles\n\n::: {style=\"font-size: 0.85em;\"}\nWe can make it easier to distinguish between lines in our graph by adjusting the line style (`linetype` and `linewidth`), or by changing overall opacity (`alpha`).\n\nWe'll work through some examples below using another subset from `usbirth_1994_2014`.\n:::\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\navg_births_dow_mnth <- usbirth_1994_2014 |>\n    dplyr::filter(year >= 2008 & year < 2010) |>\n    dplyr::group_by(yr_mnth, day_of_week) |>\n    dplyr::summarise(avg_births = mean(births, na.rm = TRUE)) |>\n    dplyr::ungroup()\ndplyr::glimpse(avg_births_dow_mnth)\n#> Rows: 168\n#> Columns: 3\n#> $ yr_mnth     <date> 2008-01-01, 2008-01-01, 2008-01-01, 2…\n#> $ day_of_week <ord> Sun, Mon, Tues, Wed, Thurs, Fri, Sat, …\n#> $ avg_births  <dbl> 7535.25, 12344.00, 12280.60, 12925.00,…\n```\n:::\n\n:::\n\n\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nlabs_line_styles <- labs(\n    title = \"Average US births\",\n    subtitle = paste0(\n        \"Between \",\n        min(avg_births_dow_mnth$yr_mnth),\n        \" and \",\n        max(avg_births_dow_mnth$yr_mnth)\n    ),\n    y = \"Average births\",\n    x = \"Year-Month\",\n    color = \"Day of Week\"\n)\n```\n:::\n\n:::\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**`alpha` & `linewidth`:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nColor palettes are a excellent too for highlighting or emphasizing certain lines over others.\n \nWe'll start by creating a line graph layer for Monday (`\"Mon\"`), Thursday (`\"Thurs\"`), and Friday (`\"Fri\"`) adjusting the opacity with `alpha`.\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggp2_line_mon_thur_fri <-\n    ggplot(data = dplyr::filter(avg_births_dow_mnth,\n        day_of_week %in% c(\"Mon\", \"Thurs\", \"Fri\"))) +\n    geom_line(\n        aes(x = yr_mnth,\n            y = avg_births,\n            group = day_of_week,\n            color = day_of_week),\n        alpha = 1 / 4,\n        linewidth = 0.85)\n# layer 1\nggp2_line_mon_thur_fri +\n    labs_line_styles +\n    theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](grp_line_graphs_files/figure-html/ggp2_line_mon_thur_fri-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**`linetype`:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nThen we'll change the `linetype` of Saturday and Sunday to `\"longdash'` (and make this *somewhat* transparent with a slightly higher `alpha`).\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggp2_line_sat_sun <- ggp2_line_mon_thur_fri +\n    geom_line(data = dplyr::filter(avg_births_dow_mnth,\n            day_of_week %in% c(\"Sat\", \"Sun\")),\n        aes(x = yr_mnth,\n            y = avg_births,\n            group = day_of_week,\n            color = day_of_week),\n        alpha = 1 / 2,\n        linewidth = 0.75,\n        linetype = \"longdash\")\n# layers 1 & 2\nggp2_line_sat_sun +\n    labs_line_styles +\n    theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](grp_line_graphs_files/figure-html/ggp2_line_sat_sun-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**Color palettes:**\n:::\n\n\n::: {style=\"font-size: 0.85em;\"}\nAdd `geom_line()` for Wednesday and Tuesday, but change the color pallete with `paletteer` and `ggthemes`. \n\nWe also manually set the legend order by supplying the original factor levels to the `breaks` argument. \n:::\n\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nlibrary(paletteer)\nlibrary(ggthemes)\n# original factor levels\nlev_order <- levels(avg_births_dow_mnth$day_of_week)\n# layer 3\nggp2_line_pal_d <- ggp2_line_sat_sun +\n    # add line\n    geom_line(data = dplyr::filter(avg_births_dow_mnth,\n            day_of_week %in% c(\"Wed\", \"Tues\")),\n        aes(x = yr_mnth,\n            y = avg_births,\n            group = day_of_week,\n            color = day_of_week),\n        linewidth = 1.25) +\n    # add palette\n    ggplot2::scale_color_manual(\n        breaks = lev_order,\n        # original factor levels\n        values = paletteer::paletteer_d(palette = \"ggthemes::Color_Blind\",\n            n = 7))\n# three layers\nggp2_line_pal_d +\n    # labels\n    labs_line_styles +\n    # legend position\n    theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](grp_line_graphs_files/figure-html/ggp2_line_pal_d-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nChanging the look of the lines is a great way to highlight or emphasize some lines over others.\n:::\n\n### Labels\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**LABELS:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nIn the previous graph, we can see the number of average births reaches it's peak in  `2008` or `2009`, so we'll use labels to display the max births and max average births. \n\nTo accomplish this, we're going to create two small tables of labels, `label_max_dow` and `label_max_avg_dow`, that we'll use to label the maximum values. \n\nThey will each have 7 rows (one for each day of the week) and a label variable (`lbl`) which we can use with `geom_label()`.\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlabel_max_dow <- usbirth_1994_2014 |>\n    dplyr::group_by(day_of_week) |>\n    dplyr::summarise(max_births = max(births, na.rm = TRUE)) |>\n    dplyr::ungroup() |>\n    dplyr::arrange(desc(max_births)) |>\n    dplyr::inner_join(y = usbirth_1994_2014,\n        by = c(\"max_births\" = \"births\", \"day_of_week\")) |>\n    dplyr::mutate(lbl = paste0(day_of_week,\n        \" (\",\n        date,\n        \" )\",\n        \", max births = \",\n        max_births)) |>\n    dplyr::select(day_of_week, yr_mnth, max_births, lbl)\n\ndplyr::arrange(label_max_dow, desc(max_births)) |>\n    dplyr::slice(1:2)\n```\n:::\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"day_of_week\"],\"name\":[1],\"type\":[\"ord\"],\"align\":[\"right\"]},{\"label\":[\"yr_mnth\"],\"name\":[2],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"max_births\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"lbl\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Wed\",\"2\":\"2009-09-01\",\"3\":\"16081\",\"4\":\"Wed (2009-09-09 ), max births = 16081\"},{\"1\":\"Tues\",\"2\":\"2008-12-01\",\"3\":\"15645\",\"4\":\"Tues (2008-12-30 ), max births = 15645\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nlabel_max_avg_dow <- avg_births_dow_mnth |>\n    # group by mon-sun\n    dplyr::group_by(day_of_week) |>\n    # get max avg\n    dplyr::summarise(max_avg_births = max(avg_births, na.rm = TRUE)) |>\n    # ungroup\n    dplyr::ungroup() |>\n    # join back to table\n    dplyr::inner_join(y = avg_births_dow_mnth,\n        by = \"day_of_week\") |>\n    # check for max\n    dplyr::mutate(is_max = case_when(\n        avg_births == max_avg_births ~ TRUE,\n        avg_births != max_avg_births ~ FALSE,\n    )) |>\n    # remove non-maxes\n    filter(is_max == TRUE) |>\n    dplyr::mutate(lbl = paste0(day_of_week,\n        \": Max avg births = \",\n        max_avg_births)) |>\n    # reduce\n    select(day_of_week, yr_mnth, max_avg_births, lbl)\ndplyr::arrange(label_max_avg_dow, desc(max_avg_births)) |>\n    dplyr::slice(1:2)\n```\n:::\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"day_of_week\"],\"name\":[1],\"type\":[\"ord\"],\"align\":[\"right\"]},{\"label\":[\"yr_mnth\"],\"name\":[2],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"max_avg_births\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"lbl\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Tues\",\"2\":\"2008-07-01\",\"3\":\"14368.40\",\"4\":\"Tues: Max avg births = 14368.4\"},{\"1\":\"Wed\",\"2\":\"2008-09-01\",\"3\":\"14365.75\",\"4\":\"Wed: Max avg births = 14365.75\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nNow that we have label tables for each metric, we can filter them to the days we want to label. \n\nWe'll use `filter()` to get the maximum values for `\"Wed\"` (in `label_max_wed_dow` and `label_max_avg_wed_dow`):\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# get wed\nlabel_max_wed_dow <- label_max_dow |>\n    filter(day_of_week == \"Wed\")\nlabel_max_wed_dow\nlabel_max_avg_wed_dow <- label_max_avg_dow |>\n    filter(day_of_week == \"Wed\")\nlabel_max_avg_wed_dow\n```\n:::\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"day_of_week\"],\"name\":[1],\"type\":[\"ord\"],\"align\":[\"right\"]},{\"label\":[\"yr_mnth\"],\"name\":[2],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"max_births\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"lbl\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Wed\",\"2\":\"2009-09-01\",\"3\":\"16081\",\"4\":\"Wed (2009-09-09 ), max births = 16081\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"day_of_week\"],\"name\":[1],\"type\":[\"ord\"],\"align\":[\"right\"]},{\"label\":[\"yr_mnth\"],\"name\":[2],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"max_avg_births\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"lbl\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Wed\",\"2\":\"2008-09-01\",\"3\":\"14365.75\",\"4\":\"Wed: Max avg births = 14365.75\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nAdd `geom_point()` and `geom_label()` for Wednesday. \n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\n# point for max births/day\nggp2_line_wed_max_births_pnts <- geom_point(\n    data = label_max_wed_dow,\n    aes(x = yr_mnth,\n        y = max_births,\n        color = day_of_week),\n    size = 2.5,\n    show.legend = FALSE)\n\nggp2_line_wed_max_avg_births_pnts <-\n    geom_point(\n        data = label_max_avg_wed_dow,\n        aes(x = yr_mnth,\n            y = max_avg_births,\n            color = day_of_week),\n        size = 2.5,\n        alpha = 1/2,\n        show.legend = FALSE)\n\nggp2_line_wed_max_births_lbl <- geom_label(\n    data = label_max_wed_dow,\n    aes(x = yr_mnth,\n        y = max_births,\n        label = lbl,\n        color = day_of_week),\n    fill = \"#ffffff\",\n    nudge_y = -480,\n    nudge_x = 25,\n    size = 1.3,\n    show.legend = FALSE)\n\nggp2_line_wed_max_avg_births_lbl <-\n    geom_label(data = label_max_avg_wed_dow,\n        aes(x = yr_mnth,\n            y = max_avg_births,\n            label = lbl,\n            color = day_of_week),\n        fill = \"#ffffff\",\n        nudge_y = 145,\n        nudge_x = 85,\n        size = 1.3,\n        show.legend = FALSE)\n\nggp2_line_pal_d + \n    ggp2_line_wed_max_births_pnts + \n    ggp2_line_wed_max_avg_births_pnts +\n    ggp2_line_wed_max_births_lbl + \n    ggp2_line_wed_max_avg_births_lbl + \n    # add labels\n    labs_line_styles +\n    # move legend to top\n    theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](grp_line_graphs_files/figure-html/ggp2_line_wed_births_lbl-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n\n::: {style=\"font-size: 0.85em;\"}\nWe'll use `filter()` to get the maximum values for `\"Tues\"` (in `label_max_tues_dow` and `label_max_avg_tues_dow`):\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# point for max births/day\n# get tues\nlabel_max_tues_dow <- label_max_dow |> \n    filter(day_of_week == \"Tues\")\nlabel_max_tues_dow\nlabel_max_avg_tues_dow <- label_max_avg_dow |> \n    filter(day_of_week == \"Tues\")\nlabel_max_avg_tues_dow\n```\n:::\n\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"day_of_week\"],\"name\":[1],\"type\":[\"ord\"],\"align\":[\"right\"]},{\"label\":[\"yr_mnth\"],\"name\":[2],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"max_births\"],\"name\":[3],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"lbl\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Tues\",\"2\":\"2008-12-01\",\"3\":\"15645\",\"4\":\"Tues (2008-12-30 ), max births = 15645\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"day_of_week\"],\"name\":[1],\"type\":[\"ord\"],\"align\":[\"right\"]},{\"label\":[\"yr_mnth\"],\"name\":[2],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"max_avg_births\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"lbl\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Tues\",\"2\":\"2008-07-01\",\"3\":\"14368.4\",\"4\":\"Tues: Max avg births = 14368.4\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nAdd `geom_point()` and `geom_label()` for Tuesday.  \n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\n# point for max births/day\nggp2_line_tues_max_births_pnts <-\n    geom_point(data = label_max_tues_dow,\n        aes(x = yr_mnth,\n            y = max_births,\n            color = day_of_week),\n        size = 2.5,\n        show.legend = FALSE)\n\nggp2_line_tues_max_avg_births_pnts <-\n    geom_point(\n        data = label_max_avg_tues_dow,\n        aes(x = yr_mnth,\n            y = max_avg_births,\n            color = day_of_week),\n        size = 2.5,\n        alpha = 1/2,\n        show.legend = FALSE)\n\nggp2_line_tues_max_births_lbl <-\n    geom_label(data = label_max_tues_dow,\n        aes(x = yr_mnth,\n            y = max_births,\n            label = lbl,\n            color = day_of_week),\n        fill = \"#ffffff\",\n        nudge_y = -480,\n        nudge_x = 50,\n        size = 1.3,\n        show.legend = FALSE)\n\nggp2_line_tues_max_avg_births_lbl <-\n    geom_label(data = label_max_avg_tues_dow,\n        aes(x = yr_mnth,\n            y = max_avg_births,\n            label = lbl,\n            color = day_of_week),\n        fill = \"#ffffff\",\n        nudge_y = 300,\n        nudge_x = -80,\n        size = 1.3,\n        show.legend = FALSE)\n\n\nggp2_line_pal_d + \n    # wednesday layers \n    ggp2_line_wed_max_births_pnts + \n    ggp2_line_wed_max_avg_births_pnts +\n    ggp2_line_wed_max_births_lbl + \n    ggp2_line_wed_max_avg_births_lbl +\n    # tuesday layers \n    ggp2_line_tues_max_births_pnts + \n    ggp2_line_tues_max_avg_births_pnts +\n    ggp2_line_tues_max_births_lbl + \n    ggp2_line_tues_max_avg_births_lbl + \n    # add labels\n    labs_line_styles +\n    # move legend to top\n    theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](grp_line_graphs_files/figure-html/ggp2_line_min_births_lbl-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n### Facets\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nFinally, we can use facets to view each of the line graphs seperately (or small multiples). \n\nWe'll create a dataset with the dates limited to births between `2008-07-01` and `2010-01-01`, and calculate the median births, grouped by `date`, `day_category`, and `day_of_week` and store it as `med_births_dcat_dow_mnth`.\n:::\n\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmed_births_dcat_dow_mnth <- usbirth_1994_2014 |>\n    dplyr::filter(date >= lubridate::as_date(\"2008-07-01\") &\n            date < lubridate::as_date(\"2010-01-01\")) |>\n    dplyr::group_by(date, day_category, day_of_week) |>\n    dplyr::summarise(med_births = median(births, na.rm = TRUE)) |>\n    dplyr::ungroup()\ndplyr::glimpse(med_births_dcat_dow_mnth)\n#> Rows: 549\n#> Columns: 4\n#> $ date         <date> 2008-07-01, 2008-07-02, 2008-07-03, …\n#> $ day_category <chr> \"Weekday\", \"Weekday\", \"Weekday\", \"Wee…\n#> $ day_of_week  <ord> Tues, Wed, Thurs, Fri, Sat, Sun, Mon,…\n#> $ med_births   <int> 14350, 14189, 14182, 9449, 8061, 7725…\n```\n:::\n\n:::\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**FACETS:**\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nUsing `facet_wrap()` with a single categorical variable (`. ~ var`) will create a plot for each discrete level, while `facet_grid()` will create a level-by-level grid (specified as `var ~ var`).\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\n# labels\nlabs_line_graph_facet_wrap <- labs(\n    title = \"Median US births\",\n    subtitle = paste0(\n        \"Between \",\n        min(med_births_dcat_dow_mnth$date),\n        \" and \",\n        max(med_births_dcat_dow_mnth$date)\n    ),\n    y = \"Median births\",\n    x = \"Date\",\n    color = \"Day of Week\"\n)\n# layer\nggp2_line_facet_wrap <- ggplot(data = med_births_dcat_dow_mnth,\n    mapping = aes(x = date,\n        y = med_births,\n        group = day_of_week)) +\n    geom_line(aes(color = day_of_week)) +\n    scale_color_manual(values = c(\n        \"#30123B\", \"#4485F6\", \"#1AE4B6\",\n        \"#A1FB3E\", \"#FABA39\", \"#E3460B\", \"#7A0403\"\n    )) +\n    scale_y_continuous(\n        breaks = c(4000, 8000, 12000, 16000),\n        labels = c('4000', '8000', '12000', '16000')\n    ) +\n    scale_x_date(date_breaks = \"1 year\",\n        date_labels = c(\"2008\", \"2009\", \"2010\")) +\n    facet_wrap(day_of_week ~ ., shrink = TRUE)\n\nggp2_line_facet_wrap +\n    labs_line_graph_facet_wrap +\n    theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](grp_line_graphs_files/figure-html/ggp2_line_facet_wrap-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nIt's always a good idea to check the `x` and `y` axis text when using facets. I've adjusted the `x` and `y` axes above using `scale_y_continuous()` and `scale_x_date()` before adding `facet_wrap()`\n:::\n\n::: {style=\"font-size: 0.75em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\n# labels\nlabs_line_graph_facet_grid <- labs(\n    title = \"Median US births\",\n    subtitle = paste0(\n        \"Between \",\n        min(med_births_dcat_dow_mnth$date),\n        \" and \",\n        max(med_births_dcat_dow_mnth$date)\n    ),\n    y = \"Median births\",\n    x = \"Date\",\n    color = \"Day of Week\"\n)\n# layer\nggp2_line_facet_grid <- ggplot(data = med_births_dcat_dow_mnth,\n    mapping = aes(x = date,\n        y = med_births,\n        group = day_of_week)) +\n    geom_line(aes(color = day_of_week)) +\n    scale_color_manual(values = c(\n        \"#30123B\", \"#4485F6\", \"#1AE4B6\",\n        \"#A1FB3E\", \"#FABA39\", \"#E3460B\", \"#7A0403\"\n    )) +\n    scale_y_continuous(\n        breaks = c(4000, 8000, 12000, 16000),\n        labels = c('4000', '8000', '12000', '16000')\n    ) +\n    scale_x_date(date_breaks = \"1 year\",\n        date_labels = c(\"2008\", \"2009\", \"2010\")) +\n    facet_grid(day_of_week ~ day_category,\n        shrink = TRUE)\n\nggp2_line_facet_grid +\n    labs_line_graph_facet_grid\n```\n\n::: {.cell-output-display}\n![](grp_line_graphs_files/figure-html/ggp2_line_facet_grid-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n::: {style=\"font-size: 0.85em;\"}\nThe colors have been manually, using `scale_color_manual()` and passing seven color hex codes to the `values` argument. \n:::\n\n::::\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "grp_line_graphs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}