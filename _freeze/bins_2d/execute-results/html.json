{
  "hash": "213f77874e756ede9d78dcb34a350810",
  "result": {
    "markdown": "# 2D histograms {#sec-bins-2d}\n\n\n\n\n\n::: {.callout-tip appearance='simple' icon=false}\n***This graph is largely complete and just needs final proof reading.*** \n:::\n\n\n\n:::: {.callout-note collapse=\"false\" icon=false}\n\n<br>\n\n\n::: {.cell layout-align=\"right\"}\n::: {.cell-output-display}\n![](bins_2d_files/figure-html/full_code_display-1.png){fig-align='right' width=60% height=60%}\n:::\n:::\n\n\n::: {style=\"font-size: 1.10em; color: #02577A;\"}\n**This graph requires:**\n:::\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ two numeric (continuous) variables**\n:::\n\n::::\n\n## Description \n\nStandard histograms separate a variable's values into discrete groups, or 'bins,' which are arranged in increasing order across the `x` axis. The `y` axis displays the frequency (or count) of values within each bin. \n\nVertical bars capture the variable's distribution using the height of the bar to represent the number of values per 'bin', and the number of bars corresponds with the bin value (or 'bin-width'). \n\nWhen we extend this display to two numerical/quantitative variables, the bins are used to divide the total graph area into a grid, and color is used to display the variation in frequency (or count) of both variable values that fall within each intersecting square.\n\n\n## Set up\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**PACKAGES:**\n:::\n\nInstall packages.\n\n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n```\n:::\n\n:::\n\n\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {.column-margin}\n![Artwork by allison horst](www/lter_penguins.png){fig-align=\"right\" width=\"100%\" height=\"100%\"}\n:::\n\nWe'll take the `flipper_length_mm`, `bill_length_mm`, and `species` variables from `palmerpenguins::penguins` and drop the missing values. \n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\npenguins_2dhist <- palmerpenguins::penguins |> \n    dplyr::select(flipper_length_mm, bill_length_mm, \n                  sex, species, body_mass_g) |> \n    tidyr::drop_na()\nglimpse(penguins_2dhist)\n#> Rows: 333\n#> Columns: 5\n#> $ flipper_length_mm <int> 181, 186, 195, 193, 19…\n#> $ bill_length_mm    <dbl> 39.1, 39.5, 40.3, 36.7…\n#> $ sex               <fct> male, female, female, …\n#> $ species           <fct> Adelie, Adelie, Adelie…\n#> $ body_mass_g       <int> 3750, 3800, 3250, 3450…\n```\n:::\n\n:::\n\n## Grammar\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**CODE:**\n:::\n\n  - Create labels with `labs()`\n\n  - Initialize the graph with `ggplot()` and provide `data`\n\n  - Map `bill_length_mm` to the `x` and `flipper_length_mm` to the `y`\n\n  - Add the `geom_bin2d()` layer\n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nlabs_2dhist <- labs(\n    title = \"Adult Foraging Penguins\", \n    subtitle = \"Near Palmer Station, Antarctica\", \n    x = \"Bill length (mm)\", \n    y = \"Flipper length (mm)\")\n\nggp2_2dhist <- ggplot(data = penguins_2dhist, \n    mapping = aes(x = bill_length_mm, \n                  y = flipper_length_mm)) + \n    geom_bin2d(bins = 15)\n            \nggp2_2dhist + \n    labs_2dhist\n```\n:::\n\n:::\n\n\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**GRAPH:**\n:::\n\n\n::: {.cell .column-page-inset-right layout-ncol=\"1\"}\n::: {.cell-output-display}\n![](bins_2d_files/figure-html/create_graph_2d_hist-1.png){width=100% height=100%}\n:::\n:::\n\n\n## More info\n\n### Bins\n\nThe value for `bins` will be vary depending on the variable values--there is no correct number:\n\n  - If the number of `bins` is too low, the density may hide important nuances between the variables. \n  \n  - If the number of `bins` is too high, the noise might drown out the signal.\n\n  - Below we change the `bins` to `9`, `12` and `18` to compare the display:\n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"2\"}\n\n```{.r .cell-code}\nggp2_base <- ggplot(data = penguins_2dhist, \n    mapping = aes(x = bill_length_mm, \n                  y = flipper_length_mm))\n\nggp2_2dhist_bins18 <- ggp2_base + \n                    geom_bin2d(bins = 18)\n\nggp2_2dhist_bins12 <- ggp2_base + \n                    geom_bin2d(bins = 12) \n\nggp2_2dhist_bins9 <- ggp2_base + \n                    geom_bin2d(bins = 9)\n\nggp2_2dhist_bins18 + \n     labs_2dhist \n\nggp2_2dhist + \n    labs_2dhist\n\nggp2_2dhist_bins12 + \n     labs_2dhist \n\nggp2_2dhist_bins9 + \n  labs_2dhist\n```\n\n::: {.cell-output-display}\n![](bins_2d_files/figure-html/bins_2d_hist-1.png){width=100% height=100%}\n:::\n\n::: {.cell-output-display}\n![](bins_2d_files/figure-html/bins_2d_hist-2.png){width=100% height=100%}\n:::\n\n::: {.cell-output-display}\n![](bins_2d_files/figure-html/bins_2d_hist-3.png){width=100% height=100%}\n:::\n\n::: {.cell-output-display}\n![](bins_2d_files/figure-html/bins_2d_hist-4.png){width=100% height=100%}\n:::\n:::\n\n\n:::\n\n### Scale\n\n`scale_fill_continuous_sequential()` comes with a variety of palettes to choose from (run `hcl_palettes(type = \"sequential\")` to view the full list).\n\nWe can also reverse the order of the fill color scale with `rev` (`TRUE` or `FALSE`).\n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell .column-page-inset-right layout-ncol=\"1\"}\n\n```{.r .cell-code}\nggp2_2dhist_bins12 + \n    scale_fill_continuous_sequential(\n        palette = \"Mako\", \n        rev = TRUE) +\n    labs_2dhist \n\nggp2_2dhist_bins12 + \n    scale_fill_continuous_sequential(\n        palette = \"Mako\", \n        rev = FALSE) +\n    labs_2dhist \n```\n\n::: {.cell-output-display}\n![](bins_2d_files/figure-html/scales_2d_hist-1.png){width=100% height=100%}\n:::\n\n::: {.cell-output-display}\n![](bins_2d_files/figure-html/scales_2d_hist-2.png){width=100% height=100%}\n:::\n:::\n\n\n:::\n\n### Options\n\n::: {.column-margin}\nIf you set the point `shape` to `21`, you have control over *both* `color` and `fill`. \n:::\n\nIn the previous example we showed how to `rev`erse the color scale for the `palette` in `scale_fill_continuous_sequential()`. \n\n  - Below we reverse the color scale, but also manually set which colors on the scale we want to `begin` with (i.e., smallest data value) and which color we want to `end` with (i.e., the largest data value). Possible values range from `0` - `1`.\n\n  - We also add a `geom_point()` layer. \n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggp2_2dhist_bins12 +\n  scale_fill_continuous_sequential(\n    palette = \"SunsetDark\",\n    rev = TRUE,\n    begin = 1.0,\n    end = 0.3) +\n  geom_point(\n    fill = \"#D4F0FC\",\n    color = \"#02577A\",\n    shape = 21,\n    size = 1.8,\n    alpha = 0.60) +\n  labs_2dhist \n```\n\n::: {.cell-output-display}\n![](bins_2d_files/figure-html/pals_2d_hist-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n",
    "supporting": [
      "bins_2d_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}