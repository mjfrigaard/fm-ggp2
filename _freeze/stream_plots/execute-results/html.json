{
  "hash": "268cc34157e6913a8f6b185acc43a63b",
  "result": {
    "markdown": "# Stream plots {#sec-stream-plots}\n\n\n\n\n\n::: {.callout-tip appearance='simple' icon=false}\n***This graph is largely complete and just needs final proof reading.*** \n:::\n\n\n:::: {.callout-note collapse=\"false\" icon=false}\n\n<br>\n\n\n::: {.cell layout-align=\"right\"}\n::: {.cell-output-display}\n![](stream_plots_files/figure-html/full_code_display-1.png){fig-align='right' width=75% height=75%}\n:::\n:::\n\n\n::: {style=\"font-size: 1.10em; color: #02577A;\"}\n**This graph requires:**\n:::\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ a categorical variable**   \n:::\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ a numeric (continuous) variable** \n:::\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ a numeric (date) variable**  \n:::\n\n::::\n\n## Description \n\nStream graphs display how a numerical variable (typically on the `y` axis) changes over time (on the `x` axis) across levels of a categorical variable. These graphs are handy if the numerical value varies wildly (or isn't always present) over the time measurement.  \n\nCategorical groups are differentiated by color layers, with the area of the layer representing the change in `y` value. In `ggplot2`, we can create stream graphs using [ggstream.](https://github.com/davidsjoberg/ggstream)\n\n## Set up\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**PACKAGES:**\n:::\n\nInstall packages.\n\n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nremotes::install_github(\"davidsjoberg/ggstream\")\ninstall.packages(\"ggplot2movies\")\nlibrary(ggstream)\nlibrary(ggplot2movies)\nlibrary(ggplot2)\n```\n:::\n\n:::\n\n\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {.column-margin}\n![](www/imdb.png){fig-align=\"right\" width=\"40%\" height=\"40%\"}\n:::\n\nWe're going to use only the `mpaa`, `year`, and `budget` columns from `ggplot2movies::movies`, then drop all missing values (we have to remove special missing characters from `mpaa`). \n\nWe'll then convert `mpaa` to an ordered factor, then group by `year` and `mpaa` to calculate the average budget and filter to only those movies after `1984`. \n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nmovies_stream <- ggplot2movies::movies |> \n    dplyr::select(mpaa, year, budget) |> \n    tidyr::drop_na() |> \n    dplyr::filter(mpaa != \"\") |> \n    dplyr::mutate(mpaa = factor(mpaa, \n                            levels = c(\"NC-17\", \"R\", \n                                       \"PG-13\", \"PG\"), \n                            ordered = TRUE)) |> \n    dplyr::group_by(year, mpaa) |> \n    dplyr::summarise(\n        avg_budget = mean(budget, na.rm = TRUE)) |> \n    dplyr::ungroup() |> \n    dplyr::filter(year > 1984)\n#> `summarise()` has grouped output by 'year'. You\n#> can override using the `.groups` argument.\ndplyr::glimpse(movies_stream)\n#> Rows: 47\n#> Columns: 3\n#> $ year       <int> 1986, 1989, 1989, 1990, 1991,…\n#> $ mpaa       <ord> R, R, PG-13, R, R, PG, R, R, …\n#> $ avg_budget <dbl> 17250000, 787000, 39250000, 3…\n```\n:::\n\n:::\n\n## Grammar\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**CODE:**\n:::\n\n  - Create labels with `labs()`\n\n    - Use `paste0()` in the `subtitle` to automatically update the `year` when the `movies_stream` changes   \n\n  - Initialize the graph with `ggplot()` and provide `data`\n\n  - Map `year` to the `x`, `avg_budget` to `y`, and `mpaa` to `fill`\n\n  - Add the `geom_stream()` layer \n\n  - Adjust the `y` axis with `scale_y_continuous()` and `scales::dollar`\n\n  - Finally, move the legend with  `theme(legend.position = \"bottom\")` \n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nlabs_stream <- labs(\n    title = \"20 years of movie budgets\", \n    subtitle = \n        paste0(\"movies between\", \n            min(movies_stream$year), \n            \" and \", \n            max(movies_stream$year)),\n    x = \"Year\", \n    y = \"Average Movie Budget\")\n\nggp2_stream <- ggplot(data = movies_stream, \n    mapping = aes(x = year, \n                  y = avg_budget, \n                  fill = mpaa)) + \n    ggstream::geom_stream() + \n    scale_y_continuous(labels = scales::dollar)\nggp2_stream + \n    labs_stream + \n    theme(legend.position = \"bottom\")\n```\n:::\n\n:::\n\n\n\n::: {style=\"font-size: 1.15em; color: #1e83c8;\"}\n**GRAPH:**\n:::\n\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n::: {.cell-output-display}\n![](stream_plots_files/figure-html/create_graph_stream-1.png){width=100% height=100%}\n:::\n:::\n\n\n## More info\n\nThe [`ggstream` package](https://github.com/davidsjoberg/ggstream) has multiple arguments for adjusting the shape and look of the categorical levels (and text labels).\n\n### Type\n\n  - Map `mpaa` to `fill` (wrapped in `forcats::fct_rev()`)\n\n  - We can adjust the look of the graph by setting the `type` argument in `geom_stream()`\n\n    - `type`: change type from `\"mirror\"` (the default) to `\"proportional\"`\n\n  - Adjust colors: \n\n    - `scale_fill_manual()`: Add colors as a named vector to `values`\n\n  - Finally, add the `fill` to the labels and move the legend with  `theme(legend.position = \"bottom\")` \n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggp2_stream_prp <- ggplot(data = movies_stream, \n    mapping = aes(x = year, \n                  y = avg_budget, \n                  fill = forcats::fct_rev(mpaa))) + \n    ggstream::geom_stream(type = \"proportional\") + \n    scale_y_continuous(labels = scales::percent) + \n  scale_fill_manual(\n      values = c(\"PG-13\" = \"#0bd3d3\", \n                 \"PG\" = \"#f890e7\", \n                 \"R\" = \"#282b2d\", \n                 \"NC-17\" = \"#772953\"))\nggp2_stream_prp + \n    labs_stream + \n    labs(fill = \"mpaa\") + \n    theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](stream_plots_files/figure-html/code_graph_type-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n### Sorting\n\nTo change how the categorical areas are sorted, adjust the sorting argument to either `\"none\"`, `\"onset\"`, or `\"inside_out\"`  \n\n  - `sorting`: set the `sorting` method to `\"inside_out\"` in *both* `ggstream::geom_stream()` and `ggstream::geom_stream_label()` \n  \n  - `type`: change the type to `\"ridge\"` in *both* `ggstream::geom_stream()` and `ggstream::geom_stream_label()`    \n\nWe can also add text labels using `ggstream::geom_stream_label()`:\n\n  - Map `mpaa` (wrapped in `forcats::fct_rev()`) to `label` globally  \n  \n  - Inside `ggstream::geom_stream_label()`:  \n  \n    - set color to white (`\"#ffffff\"`) and the `size` to `2.7` \n    \n    - Remove the legend with `show.legend = FALSE`  \n\nColors:\n\n  - Use `scale_colour_manual()` and `scale_fill_manual()` to manually set the values using a named vector \n\n    - Change the `y` axis to US dollars using `scale_y_continuous()` and `scales::dollar`\n\n  - Finally, add the `fill` to the labels and move the legend with  `theme(legend.position = \"bottom\")` \n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggp2_stream_srt <- ggplot(data = movies_stream, \n    mapping = aes(x = year, \n                  y = avg_budget, \n                  fill = fct_rev(mpaa),\n                  label = fct_rev(mpaa))) + \n    ggstream::geom_stream(\n        type = \"ridge\", \n        sorting = \"inside_out\") + \n    ggstream::geom_stream_label(\n        type = \"ridge\", \n        sorting = \"inside_out\", \n        color = \"#ffffff\", \n        size = 2.7,\n        show.legend = FALSE) +\n    scale_colour_manual(\n      values = c(\"PG-13\" = \"#0bd3d3\", \n                 \"PG\" = \"#f890e7\", \n                 \"R\" = \"#282b2d\", \n                 \"NC-17\" = \"#772953\")) +\n    scale_fill_manual(\n      values = c(\"PG-13\" = \"#0bd3d3\", \n                 \"PG\" = \"#f890e7\", \n                 \"R\" = \"#282b2d\", \n                 \"NC-17\" = \"#772953\")) + \n    scale_y_continuous(labels = scales::dollar) \n    \nggp2_stream_srt + \n    labs_stream + \n    labs(fill = \"mpaa\") + \n    theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](stream_plots_files/figure-html/create_graph_sorting-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n",
    "supporting": [
      "stream_plots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}