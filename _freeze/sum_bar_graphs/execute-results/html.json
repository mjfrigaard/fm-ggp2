{
  "hash": "f67e12cb13c2c0f8df680a4ab3ffd839",
  "result": {
    "markdown": "# Summary bar graphs {#sec-sum-bar-graphs}\n\n\n\n\n\n:::: {.callout-note collapse=\"false\" icon=false}\n\n<br>\n\n\n::: {.cell layout-align=\"right\"}\n::: {.cell-output-display}\n![](sum_bar_graphs_files/figure-html/full_code_display-1.png){fig-align='right' width=60% height=60%}\n:::\n:::\n\n\n::: {style=\"font-size: 1.10em; color: #02577A;\"}\n**This graph requires:**\n:::\n\n\n::: {style=\"font-size: 1.05em; color: #282b2d;\"}\n**✅ a numeric (continuous) variable**\n\n**✅ a categorical variable** \n:::\n\n::::\n\n## Description\n\nSummary bar graphs display the sum (or total) of a numerical variable across the levels of a second categorical variable. Color is used to make comparisons and distinguish between groups (or levels) of the categorical variable. \n\nIn `ggplot2`, we can create summary bar graphs with `geom_bar()`.\n\n## Set up\n\n::: {style=\"font-size: 1.10em; color: #1e83c8;\"}\n**PACKAGES:**\n:::\n\nInstall packages.\n\n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins) \nlibrary(ggplot2)\n```\n:::\n\n:::\n\n\n\n::: {style=\"font-size: 1.10em; color: #1e83c8;\"}\n**DATA:**\n:::\n\n::: {.column-margin}\n![Artwork by Allison Horst](www/lter_penguins.png){fig-align=\"right\" width=\"100%\" height=\"100%\"}\n:::\n\n\nRemove the missing values from `body_mass_g` and `island` in the `palmerpenguins::penguins` data and convert body mass in grams to kilograms (`body_mass_kg`).\n\n*We'll also reduce the number of columns in the `penguins` data for clarity.*\n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\npeng_sum_col <- palmerpenguins::penguins |> \n    dplyr::select(body_mass_g, island) |> \n    tidyr::drop_na() |> \n    # divide the mass value by 1000\n    dplyr::mutate(\n        body_mass_kg = body_mass_g / 1000\n    )\ndplyr::glimpse(peng_sum_col)\n#> Rows: 342\n#> Columns: 3\n#> $ body_mass_g  <int> 3750, 3800, 3250, 3450, 365…\n#> $ island       <fct> Torgersen, Torgersen, Torge…\n#> $ body_mass_kg <dbl> 3.750, 3.800, 3.250, 3.450,…\n```\n:::\n\n:::\n\n\n## Grammar\n\n::: {style=\"font-size: 1.10em; color: #1e83c8;\"}\n**CODE:**\n:::\n\n  -   Create labels with `labs()`\n\n  -   Initialize the graph with `ggplot()` and provide `data`\n\n  -   Map `island` to `x` and `body_mass_kg` to `y`\n\n  -   *Inside* the `aes()` of `geom_col()`, map `island` to `fill` \n\n  -   *Outside* the `aes()` of `geom_col()`, remove the legend with `show.legend = FALSE`\n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nlabs_sum_col <- labs(\n    title = \"Total Penguin Mass\",\n    subtitle = \"How many kilograms of penguin per Island?\",\n    x = \"Island\",\n    y = \"Total Penguin Body Mass (kg)\")\nggp2_sum_col <- ggplot(data = peng_sum_col,\n    aes(x = island,\n        y = body_mass_kg)) +\n    geom_col(aes(fill = island), \n        show.legend = FALSE)  \nggp2_sum_col + \n    labs_sum_col\n```\n:::\n\n:::\n\n\n\n::: {style=\"font-size: 1.10em; color: #1e83c8;\"}\n**GRAPH:**\n:::\n\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n::: {.cell-output-display}\n![](sum_bar_graphs_files/figure-html/create_graph_sum_col-1.png){width=100% height=100%}\n:::\n:::\n\n\n\n## More Info\n\nNote that we didn't have to write any code to calculate the total `body_mass_g` (displayed on the `y` axis) by `island`.\n\nThat's because `ggplot2` does this for us!\n\n  -   If we pass a categorical variable to the `x` (like `island`) and a continuous variable to `y` (like `body_mass_kg`), `geom_col()` will calculate the `sum()` of `y` by levels of `x`\n\n  -   We can see the underlying summary of budget using `dplyr`’s `group_by()` and `summarise()` functions.\n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell}\n\n```{.r .cell-code}\npalmerpenguins::penguins |> \n    dplyr::select(body_mass_g, island) |> \n    tidyr::drop_na() |> \n    # divide the mass value by 1000\n    dplyr::mutate(\n        body_mass_kg = body_mass_g / 1000\n    ) |> \n    dplyr::group_by(island) |>\n    dplyr::summarise(\n       `Total Penguin Body Mass (kg)` = sum(body_mass_kg)) |>\n    dplyr::ungroup() |> \n    dplyr::select(`Island` = island, \n        `Total Penguin Body Mass (kg)`)\n```\n:::\n\n:::\n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-minimal\" style='font-family: \"Trebuchet MS\", verdana, sans-serif; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Island </th>\n   <th style=\"text-align:right;\"> Total Penguin Body Mass (kg) </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Biscoe </td>\n   <td style=\"text-align:right;\"> 787.575 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Dream </td>\n   <td style=\"text-align:right;\"> 460.400 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Torgersen </td>\n   <td style=\"text-align:right;\"> 189.025 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n:::\n\n## Identity vs. Count\n\n<br>\n\n  -   The `geom_bar()` geom will also create grouped bar graphs, but we have to switch the `stat` argument to `\"identity\"`.\n\n::: {style=\"font-size: 0.85em;\"}\n\n::: {.cell .column-page-inset-right layout-nrow=\"1\"}\n\n```{.r .cell-code}\nggplot(data = peng_sum_col,\n    aes(x = island,\n        y = body_mass_kg)) +\n    geom_col(aes(fill = island), \n        show.legend = FALSE,\n        stat = \"identity\")  +\n    labs_sum_col\n```\n\n::: {.cell-output-display}\n![](sum_bar_graphs_files/figure-html/show_stat_sum_col-1.png){width=100% height=100%}\n:::\n:::\n\n:::\n\n\n### `geom_bar()` vs. `geom_col()`\n\n<br>\n\n  -   `geom_bar()` will map a categorical variable to the `x` *or* `y` and display counts for the discrete levels (see [`stat_count()`](https://ggplot2.tidyverse.org/reference/geom_bar.html) for more info)\n\n\n  -   `geom_col()` will map *both* `x` *and* `y` aesthetics, and is used when we want to display numerical (quantitative) values across the levels of a categorical variable. `geom_col()` assumes these values have been created in their own column (see  [`stat_identity()`](https://ggplot2.tidyverse.org/reference/stat_identity.html) for more info)\n",
    "supporting": [
      "sum_bar_graphs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}