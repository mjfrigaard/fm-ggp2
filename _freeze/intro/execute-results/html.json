{
  "hash": "bf73393bd6a07c52aeda1153694c2622",
  "result": {
    "engine": "knitr",
    "markdown": "# Introduction {.unnumbered}\n\n\n\n\n\n\n\n\n:::: {.callout-warning collapse='false' appearance='minimal'}\n\n## [Caution]{style='font-weight: bold; font-size: 1.10em;'}\n\n::: {style='font-size: 1.05em; color: #282b2d;'}\n\n\nThis section is still being developed. The contents are subject to change.\n\n::: \n\n::::\n\n\n\n\n\n## `ggplot2` syntax\n\n> “*making infinite use of finite means*” - Wilhelm von Humboldt\n\nGrammar is often defined as the system of rules for any given language and includes word meanings, internal structures, and word arrangement. Syntax is the form, structure and order for constructing statements. `ggplot2`'s syntax is built on the grammar & syntax of R. In R, objects are like nouns, and functions are like verbs (i.e., functions 'do things' to objects).\n\n### Layers\n\nThe `ggplot2` syntax is comprised of layers, which we can use as templates.\n\n#### Data\n\nThe data layer consists of a rectangular object (like a spreadsheet) with columns and rows:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# drop missing values\npenguins <- tidyr::drop_na(penguins)\nggplot(data = penguins)\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-3-1.png){width=576}\n:::\n:::\n\n\n\n\n\n#### Mapping\n\nThe mapping layer assigns columns (variables) from the data to a visual property (i.e. graph ’**`aes`**’ thetic)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n  mapping = \n    aes(x = flipper_length_mm, \n        y = bill_length_mm))\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-4-1.png){width=1920}\n:::\n:::\n\n\n\n\n\n**Basic Template**: Data, aesthetic mappings, geom\n\n```r\nggplot(data = <DATA>) +\n  geom_*(mapping = aes(<AESTHETIC MAPPINGS>))\n```\n\n#### Statistics & geometric objects\n\n`geom_*()` functions include statistical transformations, shapes, and position adjustments for how to ‘draw’ the data on the graph\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n  mapping = aes(\n    x = flipper_length_mm, \n    y = bill_length_mm)) +\n  geom_point(\n    aes(shape = species,\n      color = sex))\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-5-1.png){width=1920}\n:::\n:::\n\n\n\n\n\nWe can have multiple layers (data, mappings, geoms) in a single graph.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n # layer 1\n  mapping = aes(\n    x = flipper_length_mm, \n    y = bill_length_mm)) +\n  geom_point(\n    aes(shape = species,\n        color = sex)) +\n# layer 2\n  geom_smooth(\n    mapping = aes(\n      x = flipper_length_mm,\n      y = bill_length_mm), \n        se = FALSE)\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-6-1.png){width=1920}\n:::\n:::\n\n\n\n\n\n-   **Template + 1 Layer**: more geoms and more aesthetic mappings\n\n``` r\nggplot(data = <DATA>) +\n    geom_*(mapping = aes(<AESTHETIC MAPPINGS>)) +\n    geom_*(mapping = aes(<AESTHETIC MAPPINGS>))\n```\n\n#### Position, labels & themes\n\nWith a finite number of objects & functions, we can combine `ggplot2`’s grammar and syntax to create an infinite number of graphs!\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = penguins,\n # layer 1\n  mapping = aes(\n    x = flipper_length_mm, \n    y = bill_length_mm)) +\n  geom_point(\n    aes(shape = species,\n        color = sex)) +\n# layer 2\n  geom_smooth(\n    mapping = aes(\n      x = flipper_length_mm,\n      y = bill_length_mm), \n        se = FALSE) +\n# layer 3\n  facet_wrap(. ~ island, ncol = 2) + \n  # labels\n  labs(\n    x = 'Flipper length (mm)',\n    y = 'Bill length (mm)', \n    title = 'Penguins', \n    subtitle = 'Bills vs. Flippers'\n    ) + \n  # themes\n  theme(legend.position = \"top\") \n```\n\n::: {.cell-output-display}\n![](intro_files/figure-html/unnamed-chunk-7-1.png){width=1920}\n:::\n:::\n\n\n\n\n\n**Template + 2 Layers + Facets + Theme + Labels**\n\nLayers = infinitely extensible! \n\n```r\nggplot(data = <DATA>) +\n    geom_*(mapping = aes(<AESTHETIC MAPPINGS>)) +\n    geom_*(mapping = aes(<AESTHETIC MAPPINGS>)) +\n    facet_* +\n    theme() +\n    labs()\n```\n\n\n## Graph Categories\n\nGraphs have been categorized into the following types (you can see them in the floating table of contents to your left).\n\n-   **Univariate**: if you have a single column you're trying to visualize\n\n-   **Amounts**: counts or simple summary statistics of one or two columns in a dataset\n\n-   **Proportions**: ratio displays of part-to-whole\n\n-   **Distributions**: displaying the shape of a variable's values (normalcy, skewness, kurtosis, etc.)\n\n-   **Dates & Times**: changes in quantitative or categorical variables over a dimension of time (date-time, date, year, month, quarter, etc.).\n\n-   **Relationships**: how does the change of values in variable `x` affect the values in variable `y` (and possibly `z`)?\n\nSome graphs can justifiably belong to more than one category, and wherever this is the case, I've tried to include links to other applications in the notes.\n\n## Assumptions\n\nI've made an effort to write the graph code so it can be read and understood *without* having to execute it.[^intro-1] However, the examples assume the reader has already answered the question, “*what kind of data do I have?*”[^skimr-inspectdf]\n\n[^skimr-inspectdf]: If not, I highly recommend the [`skimr`](https://docs.ropensci.org/skimr/) and [`inspectdf`](https://alastairrushworth.github.io/inspectdf/) packages for getting to know your data better.\n\n## Theme\n\nThe theme used in the graphs is custom and uses combined elements from `ggplot2::theme_minimal()` and `ggplot2::theme_void()`. View it [here](https://github.com/mjfrigaard/fm-ggp2/blob/main/R/theme_ggp2g.R).\n\n## Style & structure\n\nEach graph has the following sections:\n\n1. **Prerequisites**\n\n    -   *Should I use this graph?*\\\n    -   *This graph requires:*\\\n\n2.  **Description**\n\nA brief summary of the graph's background, purpose, and aesthetics.\n\n3.  **Set up**\n\n    -   *Packages and Data*\n        -   Code for installing development version of packages (if necessary) for graphs *and* data\\\n        -   Any steps used to create (i.e., manipulate and prepare) the data for the graph\\\n\n4.  **The grammar**\n\n    -   *Code to build the labels and graph layers*\n        -   Graph labels have the `labs_` prefix\\\n        -   Graph layers have a `ggp2_` prefix\\\n\n5.  **More info**\n\n    -   *Additional methods, arguments, or applications*\n        -   Color palettes\\\n        -   Complimentary packages\n\nI've attempted to balance brevity and clarity, but with the assumption that its best to err on the latter. I've also followed the general principle that if a graph can be *easily* built using one of `ggplot2` 's `geom_*` functions, that method is shown first.\n\n[^intro-1]: This field manual follows a [Rule of Least Power Principle](https://www.w3.org/2001/tag/doc/leastPower.html), in the sense that \"*a language with a straightforward syntax may be easier to analyze than an otherwise equivalent one with more complex structure.*\"\n\n",
    "supporting": [
      "intro_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}